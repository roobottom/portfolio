{"nunjucksPath":"./templates/","patterns":{"input":"./templates/patterns/**/*.html","string":"{% macro figure(img) %}\n  <figure data-width=\"{{img.width}}\" data-height=\"{{img.height}}\">\n      <img src=\"{{img.src}}\"/>\n      {% if img.caption %}\n      <figcaption>\n        {{img.caption}}\n      </figcaption>\n      {% endif %}\n  </figure>\n{% endmacro %}\n"},"pages":[{"name":"homepage","input":"./source/homepage.md","output":"./docs/index.html","template":"pages/homepage.html","items":[{"title":"Jon Roobottom: Design leadership","url":"homepage","content":"<h1>Clear, concise, <em>design</em> leadership</h1>\n<h2>Design thinking. Developer know-how.</h2>\n<p>Businesses the world over are reawakening to the power of design. They’re building products that are genuinely impactful and helping their customers succeed in ways they never thought possible. <em>Design</em> is the critical ingredient. It’s the special sauce that’s allowing them to supercharge everything they do.</p>\n<p>I help organisations succeed through design by enabling teams to work smarter. With a background in design <em>and</em> development means I bring the best of both worlds into my work and in the way I manage designers.</p>\n<p>Currently, I’m the Head of Design for <a href=\"https://fireflylearning.com\">Firefly Learning</a> where I lead a team of incredibly talented UX, visual and communication designers.</p>\n","intro":"<p>Businesses the world over are reawakening to the power of design. They’re building products that are genuinely impactful and helping their customers succeed in ways they never thought possible. <em>Design</em> is the critical ingredient. It’s the special sauce that’s allowing them to supercharge everything they do.","humanDate":{"day":"8th","month":"Feb","year":"2018","date":"Thursday, February 8th 2018"}}]},{"name":"about","input":"./source/about.md","output":"./docs/about/index.html","template":"pages/about.html","items":[{"title":"About Me","seoTitle":"Jon Roobottom: Building things for the web since 2001","url":"about","content":"<p>Hello, my name is Jon, and I’ve been designing and building things for the web <a href=\"https://web.archive.org/web/20010101*/roobottom.com\">since 2001</a>. Yes, I’ve been at this quite a while now but don’t worry: I still sport a reassuringly wankerish beard and finely quaffed hair-do.</p>\n<p>I live on England’s beautiful south coast with my wife and daughter.</p>\n<h2>What I do</h2>\n<p>I’m the Head of Design for Firefly Learning. I lead a team of UX, visual and communication designers. It’s my job to ensure they can succeed in their roles. I’m also a member of Firefly’s first team: The senior leadership crew with its hand of the tiller, navigating the company through choppy waters as we attempt to grow to 450 million users.</p>\n<h2>What I value</h2>\n<p>Having values is good. They help me decide what work is vital and what can I can ignore. My values are like the pruning sheers of my professional life.</p>\n<p>(How can these needs be met? I.e., movement: being given the time to go for a run at lunchtime)</p>\n<h3>Storytelling</h3>\n<p>I believe in the power of stories and pictures to communicate complicated ideas.</p>\n<h3>Code</h3>\n<p>I believe in the importance of the logical, systems thinking that comes with learning how to program a computer</p>\n<h3>Movement</h3>\n<p>I believe that great work happens when both body and mind are fit and healthy</p>\n<h3>Never being satisfied</h3>\n<p>I believe in continually striving to better myself</p>\n","intro":"<p>Hello, my name is Jon, and I’ve been designing and building things for the web <a href=\"https://web.archive.org/web/20010101*/roobottom.com\">since 2001</a>. Yes, I’ve been at this quite a while now but don’t worry: I still sport a reassuringly wankerish beard and finely quaffed hair-do.","humanDate":{"day":"8th","month":"Feb","year":"2018","date":"Thursday, February 8th 2018"}}]},{"name":"articles","input":"./source/articles.md","output":"./docs/articles/index.html","template":"pages/articles.html","items":[{"title":"Articles","url":"articles","content":"","intro":"","humanDate":{"day":"8th","month":"Feb","year":"2018","date":"Thursday, February 8th 2018"}}]},{"name":"work","input":"./source/work.md","output":"./docs/work/index.html","template":"pages/work.html","items":[{"title":"Work","url":"work","content":"<p>Work</p>\n","intro":"<p>Work","humanDate":{"day":"8th","month":"Feb","year":"2018","date":"Thursday, February 8th 2018"}}]},{"name":"styleguide","input":"./source/styleguide.md","output":"./docs/styleguide/index.html","template":"pages/styleguide.html","items":[{"title":"Styleguide","url":"styleguide","content":"<p>Styleguide page</p>\n","intro":"<p>Styleguide page","humanDate":{"day":"8th","month":"Feb","year":"2018","date":"Thursday, February 8th 2018"}}]},{"name":"styleguide-principals","input":"./source/styleguide/principals.md","output":"./docs/styleguide/principals/index.html","template":"pages/styleguide-principals.html","items":[{"title":"Design Principals","url":"principals","content":"<h2>A pleasurable reading experience</h2>\n<p>Communication <em>via</em> the written word is one of life’s great pleasures. Therefore, it’s essential that the reading experience on this site is delightful. Good typography is crucial and should be considered first in all designs.</p>\n<h2>Hand-drawn</h2>\n<p>Simple hand-drawn illustrations should be used to communicate ideas more effectively. Drawings don’t have to be perfect, but they should be working hard to tell a story beyond the words they support.</p>\n<h2>Straightforward to build</h2>\n<p>Making design decisions for ease of development means compromise. It means finding the sweet spot between the fine-grain control that a design tool like Sketch affords versus the limitations of HTML and CSS.</p>\n<h2>Reuse, reuse, reuse</h2>\n<p>I’m a great believer in reusing components to do more than one job. You can use this site with the smallest set of ingredients possible.</p>\n<h2>Tactile</h2>\n<p>This site should <em>feel</em> pleasing to navigate. Interactions should be as satisfying as interacting with real-world objects.</p>\n","intro":"<p>Communication <em>via</em> the written word is one of life’s great pleasures. Therefore, it’s essential that the reading experience on this site is delightful. Good typography is crucial and should be considered first in all designs.","humanDate":{"day":"8th","month":"Feb","year":"2018","date":"Thursday, February 8th 2018"}}]}],"blogs":[{"name":"articles","input":"./source/articles/*.md","output":"./docs/articles","template":"blogs/article.html","sortBy":"date","tags":{"output":"./docs/articles/tags","template":"blogs/articles-tag.html","items":[{"name":"leading design conference","count":1,"items":[{"title":"Some thoughts on design leadership","tags":["leading design conference","design","design leadership","barbican","conferences"],"date":"2017-10-30T00:00:00.000Z","url":"67","content":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.</p>\n<p>Before last year’s event, I was still trying to figure out what my job was, let alone how to do it well. I think my biggest fear when I took the position was that I would no longer have much to offer. Increasingly I’d be taking on less and less of the day-to-day work, and without producing designs or churning out HTML what was I? Last year’s conference helped me to figure out at least some of what I should be doing with my days:</p>\n<ul>\n<li>Designing team processes, environments and culture</li>\n<li>Protecting the team from too much work</li>\n<li>Evangelising design’s role in the company’s success</li>\n</ul>\n<p>My <a href=\"http://roobottom.com/articles/56/\">notes from last year</a> are a bit of a mess. This tells me that I hadn’t really fully understood what any of these new responsibilities were. In fact, its taken the last year for me to get a handle on what any of these mean for my working life. Was I doing a shitty job in the meantime? No, well, I certainly don’t think so. I just hadn’t fully appreciated that I’d taken the step out of a production role and into a leadership role and that I was completely unprepared for what that meant.</p>\n<p>The more I learn about design leadership, the more I realise that in most of the challenges you face every day, you can usually ditch the word <em>design</em>. Leadership is its own thing, a skill you have to be taught and then refine over time. Just because you can design doesn’t automatically mean you can lead a team of designers. Not something I was quick to pick up on. My advice for new design leaders is to realise that you’re unprepared for this new challenge and to cut yourself some slack when things inevitably go wrong.</p>\n<hr />\n<p>This year, I kept a page at the front of my notebook titled “Overall thoughts” and whenever I heard common themes that struck a chord, I wrote them down:</p>\n<ul>\n<li>Things go wrong for everyone, no team is perfect, not even those with 100s of designs and huge budgets</li>\n<li>No-one in your company knows what design leadership is. Spend more time with other design leaders</li>\n<li>Be the “shit umbrella” — protect your team</li>\n<li>Managing designers is hard (although, I’d change this to managing people is hard)</li>\n<li>Strategic partnership is a must. Strive to understand how you can help others in your company solve problems by understanding their point of view</li>\n<li>Take the time to understand your business, not just the role of design within it</li>\n<li>Ask obvious questions, it’s a safe bet that your not the only one who doesn’t understand</li>\n</ul>\n<p>My thoughts on design leadership continue to evolve. I don’t think I’ll ever get to a point where I can write a comprehensive list of what makes a good Head of Design. Like anything, you get better at it over time. There’s always more to be learned, and always some way to be better at your job.</p>\n<p>I do think it’s important to keep evaluating and striving to be better. And, of course, events like Leading Design give you time to step back from the coalface and formulate your thoughts.</p>\n","intro":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.","humanDate":{"day":"30th","month":"Oct","year":"2017","date":"Monday, October 30th 2017"},"prev":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}],"url":"leading-design-conference"},{"name":"design","count":2,"items":[{"title":"Some thoughts on design leadership","tags":["leading design conference","design","design leadership","barbican","conferences"],"date":"2017-10-30T00:00:00.000Z","url":"67","content":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.</p>\n<p>Before last year’s event, I was still trying to figure out what my job was, let alone how to do it well. I think my biggest fear when I took the position was that I would no longer have much to offer. Increasingly I’d be taking on less and less of the day-to-day work, and without producing designs or churning out HTML what was I? Last year’s conference helped me to figure out at least some of what I should be doing with my days:</p>\n<ul>\n<li>Designing team processes, environments and culture</li>\n<li>Protecting the team from too much work</li>\n<li>Evangelising design’s role in the company’s success</li>\n</ul>\n<p>My <a href=\"http://roobottom.com/articles/56/\">notes from last year</a> are a bit of a mess. This tells me that I hadn’t really fully understood what any of these new responsibilities were. In fact, its taken the last year for me to get a handle on what any of these mean for my working life. Was I doing a shitty job in the meantime? No, well, I certainly don’t think so. I just hadn’t fully appreciated that I’d taken the step out of a production role and into a leadership role and that I was completely unprepared for what that meant.</p>\n<p>The more I learn about design leadership, the more I realise that in most of the challenges you face every day, you can usually ditch the word <em>design</em>. Leadership is its own thing, a skill you have to be taught and then refine over time. Just because you can design doesn’t automatically mean you can lead a team of designers. Not something I was quick to pick up on. My advice for new design leaders is to realise that you’re unprepared for this new challenge and to cut yourself some slack when things inevitably go wrong.</p>\n<hr />\n<p>This year, I kept a page at the front of my notebook titled “Overall thoughts” and whenever I heard common themes that struck a chord, I wrote them down:</p>\n<ul>\n<li>Things go wrong for everyone, no team is perfect, not even those with 100s of designs and huge budgets</li>\n<li>No-one in your company knows what design leadership is. Spend more time with other design leaders</li>\n<li>Be the “shit umbrella” — protect your team</li>\n<li>Managing designers is hard (although, I’d change this to managing people is hard)</li>\n<li>Strategic partnership is a must. Strive to understand how you can help others in your company solve problems by understanding their point of view</li>\n<li>Take the time to understand your business, not just the role of design within it</li>\n<li>Ask obvious questions, it’s a safe bet that your not the only one who doesn’t understand</li>\n</ul>\n<p>My thoughts on design leadership continue to evolve. I don’t think I’ll ever get to a point where I can write a comprehensive list of what makes a good Head of Design. Like anything, you get better at it over time. There’s always more to be learned, and always some way to be better at your job.</p>\n<p>I do think it’s important to keep evaluating and striving to be better. And, of course, events like Leading Design give you time to step back from the coalface and formulate your thoughts.</p>\n","intro":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.","humanDate":{"day":"30th","month":"Oct","year":"2017","date":"Monday, October 30th 2017"},"prev":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}},{"title":"Creating a pattern library in Sketch","date":"2017-05-02T00:00:00.000Z","tags":["pattern libraries","design","sketchapp","abstractapp","firefly"],"images":[{"image":"map.png","caption":"We created a map of all the existing patterns and their states and modifiers","set":"map"},{"image":"categorising-symbols.png","caption":"An example of how were using layout and labels to categorise symbols in Sketch","set":"categorising"},{"image":"symbols-dropdown.png","caption":"Using slash notation in symbols names to create easily navigable folders within Sketch","set":"dropdown"},{"image":"button-anatomy.png","set":"button-anatomy"},{"image":"using-a-symbol.png","caption":"Using symbol overrides to change the appearance of the button pattern.","set":"using-a-symbol"},{"image":"abstract.png","caption":"Our Pattern Library (or kits as we sometimes call them) as projects in Abstract","set":"abstarct"},{"image":"pin-to-corner.png","caption":"An example of using a transparent shape to pin a symbol to a specific corner, in this case the bottom-left","set":"pintocorner"},{"image":"override-colour.png","caption":"Using a combination of symbol overrides and masks lets you pick an icon and change it’s colour","set":"overridecolour"}],"url":"64","content":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.</p>\n<p>At Firefly, we’ve recently made the transition to Sketch specifically because of the power of symbols. These have enabled us to build our pattern library in a way that helps us to do some extremely rapid prototyping and create consistent experiences for our users.</p>\n<p>Our Front-End and iOS teams already have their own pattern libraries. These are different, partly due to technical reasons, but there’s another reason we kept the patterns separate. As we continue to strive for feature parity between platforms, its obvious that there are some fundamental differences between web and iOS.  There is a <em>way</em> of doing things in iOS — interactions that users expect — that’s different from the web. Hence, web and iOS have the same features, but implemented in the way that makes the most sense to users of that platform.</p>\n<p>Our dream was to create two design pattern libraries that would contain the same elements as the web and iOS libraries. This would mean that we’d all be working from the same list of patterns, rather than adding a translation step when it came to implementation.</p>\n<h2>Structure</h2>\n<p>We studied the structure of the existing pattern libraries and created a map that included all patterns, their modifiers and states. This gave us the structure for our patterns, and a place to start from when translating programatic patterns into something that would be useable in Sketch.</p>\n<p>In simple terms, our pattern library is a number of Sketch files containing — as symbols — all the elements in the Firefly interface. We divide these into separate files, one for each platform. We’ve also broken web into web-core and one file for each of our <a href=\"http://themes.fireflylearning.com\">four core themes</a>.</p>\n<p>In each of the files, we’ve categorised our symbols into areas. This helps massively with your mental model when browsing the symbols page. This also allows us to print a visual style-guide of all our patterns.</p>\n<p>(figure set:categorising,class:poke-both)</p>\n<h2>Symbols</h2>\n<p>Sketch supports symbol nesting and overrides. This makes symbols extremely powerful. This allows you to create a pattern element by combining symbols together.</p>\n<p>However, organisation is everything. If you don’t follow a systematic approach to creating patterns, they’re extremely difficult to use in the wild. We know from experience that confusion arises about which symbols are patterns, and which are simply the building blocks of patterns. Let me explain…</p>\n<h3>Parts and Patterns</h3>\n<p>(figure set:button-anatomy,class:pull-right)</p>\n<p>A pattern is made up of either parts or other symbols. Each part is a symbol. A Button, for example, is made up of two parts <em>Background</em> and <em>Label</em>, and another pattern <em>Icon</em>. We use <a href=\"https://www.sketchapp.com/learn/documentation/symbols/organizing-symbols/\">slash notation</a> to organise parts and patterns under one namespace.</p>\n<p>(figure set:dropdown,class:poke-both)</p>\n<p>Organising our symbols this way makes it easy when using a pattern. It’s immediately obvious from the list of symbols which is a pattern that’s intended for use, and which are just the building blocks of patterns.</p>\n<h3>Using Patterns in the wild</h3>\n<p>When designing a new feature, we’ll start out with a blank sketch file. Let’s say, for example, that we wanted a very simple interface that required two buttons: OK and Cancel. OK needs to be a cancel type with a tick icon, and Cancel needs to be a default type with a cross icon.</p>\n<p>In our pattern library file, we have a page called <em>scratch</em> where we can set up a pattern ready to be copied into another file. We select the <code>Button &gt; Patterns &gt; Button with Icon Left</code> symbol from the list and drop it into our scratch page. We can then use the symbol overrides to change it’s Background, Icon and Label as required. We can also override the text.</p>\n<p>(figure set:using-a-symbol,class:poke-both)</p>\n<p>Once the pattern is set up, we can then copy this into the new document. This only copies the parts required for this instance of the pattern. So trying to change the symbol overrides in the new file won’t work until you copy over all variations of a pattern.</p>\n<h2>Tips ’n tricks</h2>\n<p>There’s a few areas where symbols are ripe for improvement. Given Bohemian’s track record for updates and bug fixes I suspect these can’t be too far off. Meantime, there’s a couple of workarounds that we’ve found particularly useful that I’d like to share.</p>\n<h3>Pin to corner</h3>\n<p>The ability to change resize behaviour in symbols is extremely useful. However, the “Pin to corner” option is somewhat limited as it doesn’t let you specify <em>which</em> corner.</p>\n<p>(figure set:pintocorner,class:pull-right)</p>\n<p>We solve this by simply grouping a transparent shape in with the layer we wish to align. This allows you pin to other corners than the one that Sketch might have automatically picked for you.</p>\n<h3>Override colours of icons</h3>\n<p>It’s annoying to have to have separate symbols for different icon colours. Especially when adding a new colour, meaning you have to create a new symbol for all the icons in the new colour.</p>\n<p>Luckily, we can use layer masks and overrides to easily add colour options. An Icon pattern is actually a grouped rectangle masked out by the icon shape. We are then able to control the icon type <em>and</em> colour from a pre-defined pallet of colours. Adding a new colour is as easy as adding a new icon mask symbol.</p>\n<p>(figure set:overridecolour,class:poke-both)</p>\n<p>Another small tip: Make your icons and masks different sizes, that way you won’t get shown all the icons and colours together in the overrides dropdown.</p>\n<hr />\n<h2>Sharing patterns</h2>\n<p>So far I’ve not really touched on how we’re using our pattern library across a team. An essential part of any pattern library is its use beyond a single person. When we set out to create our pattern library, we had a simple set of requirements:</p>\n<ol>\n<li>Symbols should be stored in a central location that is accessible by the whole team</li>\n<li>Symbols can be linked across files, updating a symbol in any file updates it everywhere</li>\n<li>Editing clashes are handled in a nice way</li>\n<li>Symbols can be organised into categories</li>\n</ol>\n<h3>What we’re currently doing</h3>\n<p>Initially we experimented with <a href=\"https://www.invisionapp.com/craft\">Craft</a> from inVision. It’s library functionality would allow us to store symbols in a central location, share them across the team. Most excitingly of all, symbols would be linked across files, meaning we could ensure we were always using the latest version in our designs.</p>\n<p>Unfortunately, when it came to handling editing clashes, Craft did less well. We lost an entire week of work due to our library file becoming corrupted. We were told that this was a known issue, and the file was unrecoverable. We decided not to entrust our entire pattern library to Craft, there was no way we could risk that happening again.</p>\n<p>We switched to using Sketch files themselves to contain our patterns. A downside to this solution was that editing clashes weren’t handled, at all. Rather, whoever saved the file last would overwrite work of anyone else. Thankfully, <a href=\"https://abstractapp.com/\">Abstract</a> came to our rescue.</p>\n<p>The team has been using Abstract for version management of Sketch files for the last few weeks, and what a difference it’s made! Once you have the git mental model in your head, Abstract’s workflow makes a lot of sense. We can now branch off the master pattern library document, make our changes, and merge back. Clashes are handled visually, giving you the choice of which symbol definition to keep.</p>\n<p>(figure set:abstarct,class:poke-both)</p>\n<p>We now have three out of four of our original requirements. We’re almost there! But what about linking symbols across files?</p>\n<h2>A native solution?</h2>\n<p>I’d argue that level of complexity represented by shared symbols in Sketch requires a native solution. Plugins, like Craft, will only ever be a poly-fill at best.</p>\n<p>Looking at the features that Bohemian have added to Sketch over the last few versions, I strongly suspect that they’re already planning shared symbols. It’s a natural fit for them, they already have the cloud infrastructure from Sketch Cloud and with their new open JSON formatted files, it seems like this might be the next logical step.</p>\n<hr />\n<p><em>Are you looking for a new design challenge in London? We’ll be hiring for some exciting positions within the design team throughout 2017 and 2018. We’d love to hear from you! Check out our <a href=\"https://fireflylearning.com/careers\">list of currently open positions</a>.</em></p>\n","intro":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.","humanDate":{"day":"2nd","month":"May","year":"2017","date":"Tuesday, May 2nd 2017"},"next":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}],"url":"design"},{"name":"design leadership","count":1,"items":[{"title":"Some thoughts on design leadership","tags":["leading design conference","design","design leadership","barbican","conferences"],"date":"2017-10-30T00:00:00.000Z","url":"67","content":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.</p>\n<p>Before last year’s event, I was still trying to figure out what my job was, let alone how to do it well. I think my biggest fear when I took the position was that I would no longer have much to offer. Increasingly I’d be taking on less and less of the day-to-day work, and without producing designs or churning out HTML what was I? Last year’s conference helped me to figure out at least some of what I should be doing with my days:</p>\n<ul>\n<li>Designing team processes, environments and culture</li>\n<li>Protecting the team from too much work</li>\n<li>Evangelising design’s role in the company’s success</li>\n</ul>\n<p>My <a href=\"http://roobottom.com/articles/56/\">notes from last year</a> are a bit of a mess. This tells me that I hadn’t really fully understood what any of these new responsibilities were. In fact, its taken the last year for me to get a handle on what any of these mean for my working life. Was I doing a shitty job in the meantime? No, well, I certainly don’t think so. I just hadn’t fully appreciated that I’d taken the step out of a production role and into a leadership role and that I was completely unprepared for what that meant.</p>\n<p>The more I learn about design leadership, the more I realise that in most of the challenges you face every day, you can usually ditch the word <em>design</em>. Leadership is its own thing, a skill you have to be taught and then refine over time. Just because you can design doesn’t automatically mean you can lead a team of designers. Not something I was quick to pick up on. My advice for new design leaders is to realise that you’re unprepared for this new challenge and to cut yourself some slack when things inevitably go wrong.</p>\n<hr />\n<p>This year, I kept a page at the front of my notebook titled “Overall thoughts” and whenever I heard common themes that struck a chord, I wrote them down:</p>\n<ul>\n<li>Things go wrong for everyone, no team is perfect, not even those with 100s of designs and huge budgets</li>\n<li>No-one in your company knows what design leadership is. Spend more time with other design leaders</li>\n<li>Be the “shit umbrella” — protect your team</li>\n<li>Managing designers is hard (although, I’d change this to managing people is hard)</li>\n<li>Strategic partnership is a must. Strive to understand how you can help others in your company solve problems by understanding their point of view</li>\n<li>Take the time to understand your business, not just the role of design within it</li>\n<li>Ask obvious questions, it’s a safe bet that your not the only one who doesn’t understand</li>\n</ul>\n<p>My thoughts on design leadership continue to evolve. I don’t think I’ll ever get to a point where I can write a comprehensive list of what makes a good Head of Design. Like anything, you get better at it over time. There’s always more to be learned, and always some way to be better at your job.</p>\n<p>I do think it’s important to keep evaluating and striving to be better. And, of course, events like Leading Design give you time to step back from the coalface and formulate your thoughts.</p>\n","intro":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.","humanDate":{"day":"30th","month":"Oct","year":"2017","date":"Monday, October 30th 2017"},"prev":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}],"url":"design-leadership"},{"name":"barbican","count":1,"items":[{"title":"Some thoughts on design leadership","tags":["leading design conference","design","design leadership","barbican","conferences"],"date":"2017-10-30T00:00:00.000Z","url":"67","content":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.</p>\n<p>Before last year’s event, I was still trying to figure out what my job was, let alone how to do it well. I think my biggest fear when I took the position was that I would no longer have much to offer. Increasingly I’d be taking on less and less of the day-to-day work, and without producing designs or churning out HTML what was I? Last year’s conference helped me to figure out at least some of what I should be doing with my days:</p>\n<ul>\n<li>Designing team processes, environments and culture</li>\n<li>Protecting the team from too much work</li>\n<li>Evangelising design’s role in the company’s success</li>\n</ul>\n<p>My <a href=\"http://roobottom.com/articles/56/\">notes from last year</a> are a bit of a mess. This tells me that I hadn’t really fully understood what any of these new responsibilities were. In fact, its taken the last year for me to get a handle on what any of these mean for my working life. Was I doing a shitty job in the meantime? No, well, I certainly don’t think so. I just hadn’t fully appreciated that I’d taken the step out of a production role and into a leadership role and that I was completely unprepared for what that meant.</p>\n<p>The more I learn about design leadership, the more I realise that in most of the challenges you face every day, you can usually ditch the word <em>design</em>. Leadership is its own thing, a skill you have to be taught and then refine over time. Just because you can design doesn’t automatically mean you can lead a team of designers. Not something I was quick to pick up on. My advice for new design leaders is to realise that you’re unprepared for this new challenge and to cut yourself some slack when things inevitably go wrong.</p>\n<hr />\n<p>This year, I kept a page at the front of my notebook titled “Overall thoughts” and whenever I heard common themes that struck a chord, I wrote them down:</p>\n<ul>\n<li>Things go wrong for everyone, no team is perfect, not even those with 100s of designs and huge budgets</li>\n<li>No-one in your company knows what design leadership is. Spend more time with other design leaders</li>\n<li>Be the “shit umbrella” — protect your team</li>\n<li>Managing designers is hard (although, I’d change this to managing people is hard)</li>\n<li>Strategic partnership is a must. Strive to understand how you can help others in your company solve problems by understanding their point of view</li>\n<li>Take the time to understand your business, not just the role of design within it</li>\n<li>Ask obvious questions, it’s a safe bet that your not the only one who doesn’t understand</li>\n</ul>\n<p>My thoughts on design leadership continue to evolve. I don’t think I’ll ever get to a point where I can write a comprehensive list of what makes a good Head of Design. Like anything, you get better at it over time. There’s always more to be learned, and always some way to be better at your job.</p>\n<p>I do think it’s important to keep evaluating and striving to be better. And, of course, events like Leading Design give you time to step back from the coalface and formulate your thoughts.</p>\n","intro":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.","humanDate":{"day":"30th","month":"Oct","year":"2017","date":"Monday, October 30th 2017"},"prev":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}],"url":"barbican"},{"name":"conferences","count":1,"items":[{"title":"Some thoughts on design leadership","tags":["leading design conference","design","design leadership","barbican","conferences"],"date":"2017-10-30T00:00:00.000Z","url":"67","content":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.</p>\n<p>Before last year’s event, I was still trying to figure out what my job was, let alone how to do it well. I think my biggest fear when I took the position was that I would no longer have much to offer. Increasingly I’d be taking on less and less of the day-to-day work, and without producing designs or churning out HTML what was I? Last year’s conference helped me to figure out at least some of what I should be doing with my days:</p>\n<ul>\n<li>Designing team processes, environments and culture</li>\n<li>Protecting the team from too much work</li>\n<li>Evangelising design’s role in the company’s success</li>\n</ul>\n<p>My <a href=\"http://roobottom.com/articles/56/\">notes from last year</a> are a bit of a mess. This tells me that I hadn’t really fully understood what any of these new responsibilities were. In fact, its taken the last year for me to get a handle on what any of these mean for my working life. Was I doing a shitty job in the meantime? No, well, I certainly don’t think so. I just hadn’t fully appreciated that I’d taken the step out of a production role and into a leadership role and that I was completely unprepared for what that meant.</p>\n<p>The more I learn about design leadership, the more I realise that in most of the challenges you face every day, you can usually ditch the word <em>design</em>. Leadership is its own thing, a skill you have to be taught and then refine over time. Just because you can design doesn’t automatically mean you can lead a team of designers. Not something I was quick to pick up on. My advice for new design leaders is to realise that you’re unprepared for this new challenge and to cut yourself some slack when things inevitably go wrong.</p>\n<hr />\n<p>This year, I kept a page at the front of my notebook titled “Overall thoughts” and whenever I heard common themes that struck a chord, I wrote them down:</p>\n<ul>\n<li>Things go wrong for everyone, no team is perfect, not even those with 100s of designs and huge budgets</li>\n<li>No-one in your company knows what design leadership is. Spend more time with other design leaders</li>\n<li>Be the “shit umbrella” — protect your team</li>\n<li>Managing designers is hard (although, I’d change this to managing people is hard)</li>\n<li>Strategic partnership is a must. Strive to understand how you can help others in your company solve problems by understanding their point of view</li>\n<li>Take the time to understand your business, not just the role of design within it</li>\n<li>Ask obvious questions, it’s a safe bet that your not the only one who doesn’t understand</li>\n</ul>\n<p>My thoughts on design leadership continue to evolve. I don’t think I’ll ever get to a point where I can write a comprehensive list of what makes a good Head of Design. Like anything, you get better at it over time. There’s always more to be learned, and always some way to be better at your job.</p>\n<p>I do think it’s important to keep evaluating and striving to be better. And, of course, events like Leading Design give you time to step back from the coalface and formulate your thoughts.</p>\n","intro":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.","humanDate":{"day":"30th","month":"Oct","year":"2017","date":"Monday, October 30th 2017"},"prev":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}],"url":"conferences"},{"name":"pattern libraries","count":2,"items":[{"title":"Too much tuna: The current state of design tools","date":"2017-07-31T00:00:00.000Z","tags":["pattern libraries"],"img":{"src":"/images/articles/66/design-club-chapter-2.jpg","caption":"Listing the tuna, members of the Design Club taking part in the workshop"},"url":"66","content":"<p>Last week I gave a short talk at <a href=\"https://www.meetup.com/Design-Club/\">Design Club</a> about what my team is currently doing with pattern libraries in Sketch.</p>\n<p>It was great to hear that people had lots of questions. Its obvious that were all thinking about patterns, and particularly how Sketch symbols have enabled a new workflow.</p>\n<p>Later, we moved on to a workshop session where we mapped out our design process and made a (long) list of all the tools we were currently using day-to-day.</p>\n  <figure data-width=\"\" data-height=\"\">      <img src=\"/images/articles/66/design-club-chapter-2.jpg\"/>            <figcaption>        Listing the tuna, members of the Design Club taking part in the workshop      </figcaption>        </figure>\n<p>What was clear is that there are a <em>lot</em> of design tools out there. Sketch is ubiquitous, having quickly proved its value against creaky Adobe tools. However, there’s a whole ecosystem of other tools that are designed to fill gaps in the designers workflow.</p>\n<p>Having both a design and front-end development background I feel like I’ve seen this all before. There have been several “revolutions” in web — <abbr title=\"Cascading Style Sheets\">CSS</abbr>, Responsiveness, HTMLinJS, etc —  that all gave rise to any number of tools that promised “more time doing what you love.”</p>\n<p>Some of these tools were flash in the pan: When they didn’t find traction amongst enough developers, they died. However, they each added their voices to the shared knowledge amongst developers on <em>how</em> to develop for the web.</p>\n<p>As it is now with design tools. Sure, some of them don’t really know what they’re trying to be, but can we blame them? We don’t know what we need right now. Ultimately what matters is the thinking behind patterns not how we build them.</p>\n<p>Ultimately, if you’re designing sites for the web or apps for devices, then eventually someone with a bit of coding nounce has to translate your designs into the real deal. Regardless of whether the ultimate destination of your design is HTML, Swift or <em>whatever</em>, I’d argue that designing with patterns in mind — no matter of the size of project — helps you think more like a developer. You’ll have better conversations with your developer friends and this will lead to a better experience for your users.</p>\n<p>Patterns is a way of thinking about design, rather than a set of tools. You could just as easily apply this thinking to MS Paint. But what the tools give us is a way to explore, as a community, what works best.</p>\n<p>I personally welcome the slew of tools even if they are pretty immature right now. There’s a really smart community of designers out there that’ll direct tool makers leading us all to a brighter future. Huzzah!</p>\n","intro":"<p>Last week I gave a short talk at <a href=\"https://www.meetup.com/Design-Club/\">Design Club</a> about what my team is currently doing with pattern libraries in Sketch.","humanDate":{"day":"31st","month":"Jul","year":"2017","date":"Monday, July 31st 2017"},"next":{"title":"Some thoughts on design leadership","url":"67","date":"2017-10-30T00:00:00.000Z"},"prev":{"title":"Creating a pattern library in Sketch","url":"64","date":"2017-05-02T00:00:00.000Z"}},{"title":"Creating a pattern library in Sketch","date":"2017-05-02T00:00:00.000Z","tags":["pattern libraries","design","sketchapp","abstractapp","firefly"],"images":[{"image":"map.png","caption":"We created a map of all the existing patterns and their states and modifiers","set":"map"},{"image":"categorising-symbols.png","caption":"An example of how were using layout and labels to categorise symbols in Sketch","set":"categorising"},{"image":"symbols-dropdown.png","caption":"Using slash notation in symbols names to create easily navigable folders within Sketch","set":"dropdown"},{"image":"button-anatomy.png","set":"button-anatomy"},{"image":"using-a-symbol.png","caption":"Using symbol overrides to change the appearance of the button pattern.","set":"using-a-symbol"},{"image":"abstract.png","caption":"Our Pattern Library (or kits as we sometimes call them) as projects in Abstract","set":"abstarct"},{"image":"pin-to-corner.png","caption":"An example of using a transparent shape to pin a symbol to a specific corner, in this case the bottom-left","set":"pintocorner"},{"image":"override-colour.png","caption":"Using a combination of symbol overrides and masks lets you pick an icon and change it’s colour","set":"overridecolour"}],"url":"64","content":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.</p>\n<p>At Firefly, we’ve recently made the transition to Sketch specifically because of the power of symbols. These have enabled us to build our pattern library in a way that helps us to do some extremely rapid prototyping and create consistent experiences for our users.</p>\n<p>Our Front-End and iOS teams already have their own pattern libraries. These are different, partly due to technical reasons, but there’s another reason we kept the patterns separate. As we continue to strive for feature parity between platforms, its obvious that there are some fundamental differences between web and iOS.  There is a <em>way</em> of doing things in iOS — interactions that users expect — that’s different from the web. Hence, web and iOS have the same features, but implemented in the way that makes the most sense to users of that platform.</p>\n<p>Our dream was to create two design pattern libraries that would contain the same elements as the web and iOS libraries. This would mean that we’d all be working from the same list of patterns, rather than adding a translation step when it came to implementation.</p>\n<h2>Structure</h2>\n<p>We studied the structure of the existing pattern libraries and created a map that included all patterns, their modifiers and states. This gave us the structure for our patterns, and a place to start from when translating programatic patterns into something that would be useable in Sketch.</p>\n<p>In simple terms, our pattern library is a number of Sketch files containing — as symbols — all the elements in the Firefly interface. We divide these into separate files, one for each platform. We’ve also broken web into web-core and one file for each of our <a href=\"http://themes.fireflylearning.com\">four core themes</a>.</p>\n<p>In each of the files, we’ve categorised our symbols into areas. This helps massively with your mental model when browsing the symbols page. This also allows us to print a visual style-guide of all our patterns.</p>\n<p>(figure set:categorising,class:poke-both)</p>\n<h2>Symbols</h2>\n<p>Sketch supports symbol nesting and overrides. This makes symbols extremely powerful. This allows you to create a pattern element by combining symbols together.</p>\n<p>However, organisation is everything. If you don’t follow a systematic approach to creating patterns, they’re extremely difficult to use in the wild. We know from experience that confusion arises about which symbols are patterns, and which are simply the building blocks of patterns. Let me explain…</p>\n<h3>Parts and Patterns</h3>\n<p>(figure set:button-anatomy,class:pull-right)</p>\n<p>A pattern is made up of either parts or other symbols. Each part is a symbol. A Button, for example, is made up of two parts <em>Background</em> and <em>Label</em>, and another pattern <em>Icon</em>. We use <a href=\"https://www.sketchapp.com/learn/documentation/symbols/organizing-symbols/\">slash notation</a> to organise parts and patterns under one namespace.</p>\n<p>(figure set:dropdown,class:poke-both)</p>\n<p>Organising our symbols this way makes it easy when using a pattern. It’s immediately obvious from the list of symbols which is a pattern that’s intended for use, and which are just the building blocks of patterns.</p>\n<h3>Using Patterns in the wild</h3>\n<p>When designing a new feature, we’ll start out with a blank sketch file. Let’s say, for example, that we wanted a very simple interface that required two buttons: OK and Cancel. OK needs to be a cancel type with a tick icon, and Cancel needs to be a default type with a cross icon.</p>\n<p>In our pattern library file, we have a page called <em>scratch</em> where we can set up a pattern ready to be copied into another file. We select the <code>Button &gt; Patterns &gt; Button with Icon Left</code> symbol from the list and drop it into our scratch page. We can then use the symbol overrides to change it’s Background, Icon and Label as required. We can also override the text.</p>\n<p>(figure set:using-a-symbol,class:poke-both)</p>\n<p>Once the pattern is set up, we can then copy this into the new document. This only copies the parts required for this instance of the pattern. So trying to change the symbol overrides in the new file won’t work until you copy over all variations of a pattern.</p>\n<h2>Tips ’n tricks</h2>\n<p>There’s a few areas where symbols are ripe for improvement. Given Bohemian’s track record for updates and bug fixes I suspect these can’t be too far off. Meantime, there’s a couple of workarounds that we’ve found particularly useful that I’d like to share.</p>\n<h3>Pin to corner</h3>\n<p>The ability to change resize behaviour in symbols is extremely useful. However, the “Pin to corner” option is somewhat limited as it doesn’t let you specify <em>which</em> corner.</p>\n<p>(figure set:pintocorner,class:pull-right)</p>\n<p>We solve this by simply grouping a transparent shape in with the layer we wish to align. This allows you pin to other corners than the one that Sketch might have automatically picked for you.</p>\n<h3>Override colours of icons</h3>\n<p>It’s annoying to have to have separate symbols for different icon colours. Especially when adding a new colour, meaning you have to create a new symbol for all the icons in the new colour.</p>\n<p>Luckily, we can use layer masks and overrides to easily add colour options. An Icon pattern is actually a grouped rectangle masked out by the icon shape. We are then able to control the icon type <em>and</em> colour from a pre-defined pallet of colours. Adding a new colour is as easy as adding a new icon mask symbol.</p>\n<p>(figure set:overridecolour,class:poke-both)</p>\n<p>Another small tip: Make your icons and masks different sizes, that way you won’t get shown all the icons and colours together in the overrides dropdown.</p>\n<hr />\n<h2>Sharing patterns</h2>\n<p>So far I’ve not really touched on how we’re using our pattern library across a team. An essential part of any pattern library is its use beyond a single person. When we set out to create our pattern library, we had a simple set of requirements:</p>\n<ol>\n<li>Symbols should be stored in a central location that is accessible by the whole team</li>\n<li>Symbols can be linked across files, updating a symbol in any file updates it everywhere</li>\n<li>Editing clashes are handled in a nice way</li>\n<li>Symbols can be organised into categories</li>\n</ol>\n<h3>What we’re currently doing</h3>\n<p>Initially we experimented with <a href=\"https://www.invisionapp.com/craft\">Craft</a> from inVision. It’s library functionality would allow us to store symbols in a central location, share them across the team. Most excitingly of all, symbols would be linked across files, meaning we could ensure we were always using the latest version in our designs.</p>\n<p>Unfortunately, when it came to handling editing clashes, Craft did less well. We lost an entire week of work due to our library file becoming corrupted. We were told that this was a known issue, and the file was unrecoverable. We decided not to entrust our entire pattern library to Craft, there was no way we could risk that happening again.</p>\n<p>We switched to using Sketch files themselves to contain our patterns. A downside to this solution was that editing clashes weren’t handled, at all. Rather, whoever saved the file last would overwrite work of anyone else. Thankfully, <a href=\"https://abstractapp.com/\">Abstract</a> came to our rescue.</p>\n<p>The team has been using Abstract for version management of Sketch files for the last few weeks, and what a difference it’s made! Once you have the git mental model in your head, Abstract’s workflow makes a lot of sense. We can now branch off the master pattern library document, make our changes, and merge back. Clashes are handled visually, giving you the choice of which symbol definition to keep.</p>\n<p>(figure set:abstarct,class:poke-both)</p>\n<p>We now have three out of four of our original requirements. We’re almost there! But what about linking symbols across files?</p>\n<h2>A native solution?</h2>\n<p>I’d argue that level of complexity represented by shared symbols in Sketch requires a native solution. Plugins, like Craft, will only ever be a poly-fill at best.</p>\n<p>Looking at the features that Bohemian have added to Sketch over the last few versions, I strongly suspect that they’re already planning shared symbols. It’s a natural fit for them, they already have the cloud infrastructure from Sketch Cloud and with their new open JSON formatted files, it seems like this might be the next logical step.</p>\n<hr />\n<p><em>Are you looking for a new design challenge in London? We’ll be hiring for some exciting positions within the design team throughout 2017 and 2018. We’d love to hear from you! Check out our <a href=\"https://fireflylearning.com/careers\">list of currently open positions</a>.</em></p>\n","intro":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.","humanDate":{"day":"2nd","month":"May","year":"2017","date":"Tuesday, May 2nd 2017"},"next":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}],"url":"pattern-libraries"},{"name":"sketchapp","count":1,"items":[{"title":"Creating a pattern library in Sketch","date":"2017-05-02T00:00:00.000Z","tags":["pattern libraries","design","sketchapp","abstractapp","firefly"],"images":[{"image":"map.png","caption":"We created a map of all the existing patterns and their states and modifiers","set":"map"},{"image":"categorising-symbols.png","caption":"An example of how were using layout and labels to categorise symbols in Sketch","set":"categorising"},{"image":"symbols-dropdown.png","caption":"Using slash notation in symbols names to create easily navigable folders within Sketch","set":"dropdown"},{"image":"button-anatomy.png","set":"button-anatomy"},{"image":"using-a-symbol.png","caption":"Using symbol overrides to change the appearance of the button pattern.","set":"using-a-symbol"},{"image":"abstract.png","caption":"Our Pattern Library (or kits as we sometimes call them) as projects in Abstract","set":"abstarct"},{"image":"pin-to-corner.png","caption":"An example of using a transparent shape to pin a symbol to a specific corner, in this case the bottom-left","set":"pintocorner"},{"image":"override-colour.png","caption":"Using a combination of symbol overrides and masks lets you pick an icon and change it’s colour","set":"overridecolour"}],"url":"64","content":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.</p>\n<p>At Firefly, we’ve recently made the transition to Sketch specifically because of the power of symbols. These have enabled us to build our pattern library in a way that helps us to do some extremely rapid prototyping and create consistent experiences for our users.</p>\n<p>Our Front-End and iOS teams already have their own pattern libraries. These are different, partly due to technical reasons, but there’s another reason we kept the patterns separate. As we continue to strive for feature parity between platforms, its obvious that there are some fundamental differences between web and iOS.  There is a <em>way</em> of doing things in iOS — interactions that users expect — that’s different from the web. Hence, web and iOS have the same features, but implemented in the way that makes the most sense to users of that platform.</p>\n<p>Our dream was to create two design pattern libraries that would contain the same elements as the web and iOS libraries. This would mean that we’d all be working from the same list of patterns, rather than adding a translation step when it came to implementation.</p>\n<h2>Structure</h2>\n<p>We studied the structure of the existing pattern libraries and created a map that included all patterns, their modifiers and states. This gave us the structure for our patterns, and a place to start from when translating programatic patterns into something that would be useable in Sketch.</p>\n<p>In simple terms, our pattern library is a number of Sketch files containing — as symbols — all the elements in the Firefly interface. We divide these into separate files, one for each platform. We’ve also broken web into web-core and one file for each of our <a href=\"http://themes.fireflylearning.com\">four core themes</a>.</p>\n<p>In each of the files, we’ve categorised our symbols into areas. This helps massively with your mental model when browsing the symbols page. This also allows us to print a visual style-guide of all our patterns.</p>\n<p>(figure set:categorising,class:poke-both)</p>\n<h2>Symbols</h2>\n<p>Sketch supports symbol nesting and overrides. This makes symbols extremely powerful. This allows you to create a pattern element by combining symbols together.</p>\n<p>However, organisation is everything. If you don’t follow a systematic approach to creating patterns, they’re extremely difficult to use in the wild. We know from experience that confusion arises about which symbols are patterns, and which are simply the building blocks of patterns. Let me explain…</p>\n<h3>Parts and Patterns</h3>\n<p>(figure set:button-anatomy,class:pull-right)</p>\n<p>A pattern is made up of either parts or other symbols. Each part is a symbol. A Button, for example, is made up of two parts <em>Background</em> and <em>Label</em>, and another pattern <em>Icon</em>. We use <a href=\"https://www.sketchapp.com/learn/documentation/symbols/organizing-symbols/\">slash notation</a> to organise parts and patterns under one namespace.</p>\n<p>(figure set:dropdown,class:poke-both)</p>\n<p>Organising our symbols this way makes it easy when using a pattern. It’s immediately obvious from the list of symbols which is a pattern that’s intended for use, and which are just the building blocks of patterns.</p>\n<h3>Using Patterns in the wild</h3>\n<p>When designing a new feature, we’ll start out with a blank sketch file. Let’s say, for example, that we wanted a very simple interface that required two buttons: OK and Cancel. OK needs to be a cancel type with a tick icon, and Cancel needs to be a default type with a cross icon.</p>\n<p>In our pattern library file, we have a page called <em>scratch</em> where we can set up a pattern ready to be copied into another file. We select the <code>Button &gt; Patterns &gt; Button with Icon Left</code> symbol from the list and drop it into our scratch page. We can then use the symbol overrides to change it’s Background, Icon and Label as required. We can also override the text.</p>\n<p>(figure set:using-a-symbol,class:poke-both)</p>\n<p>Once the pattern is set up, we can then copy this into the new document. This only copies the parts required for this instance of the pattern. So trying to change the symbol overrides in the new file won’t work until you copy over all variations of a pattern.</p>\n<h2>Tips ’n tricks</h2>\n<p>There’s a few areas where symbols are ripe for improvement. Given Bohemian’s track record for updates and bug fixes I suspect these can’t be too far off. Meantime, there’s a couple of workarounds that we’ve found particularly useful that I’d like to share.</p>\n<h3>Pin to corner</h3>\n<p>The ability to change resize behaviour in symbols is extremely useful. However, the “Pin to corner” option is somewhat limited as it doesn’t let you specify <em>which</em> corner.</p>\n<p>(figure set:pintocorner,class:pull-right)</p>\n<p>We solve this by simply grouping a transparent shape in with the layer we wish to align. This allows you pin to other corners than the one that Sketch might have automatically picked for you.</p>\n<h3>Override colours of icons</h3>\n<p>It’s annoying to have to have separate symbols for different icon colours. Especially when adding a new colour, meaning you have to create a new symbol for all the icons in the new colour.</p>\n<p>Luckily, we can use layer masks and overrides to easily add colour options. An Icon pattern is actually a grouped rectangle masked out by the icon shape. We are then able to control the icon type <em>and</em> colour from a pre-defined pallet of colours. Adding a new colour is as easy as adding a new icon mask symbol.</p>\n<p>(figure set:overridecolour,class:poke-both)</p>\n<p>Another small tip: Make your icons and masks different sizes, that way you won’t get shown all the icons and colours together in the overrides dropdown.</p>\n<hr />\n<h2>Sharing patterns</h2>\n<p>So far I’ve not really touched on how we’re using our pattern library across a team. An essential part of any pattern library is its use beyond a single person. When we set out to create our pattern library, we had a simple set of requirements:</p>\n<ol>\n<li>Symbols should be stored in a central location that is accessible by the whole team</li>\n<li>Symbols can be linked across files, updating a symbol in any file updates it everywhere</li>\n<li>Editing clashes are handled in a nice way</li>\n<li>Symbols can be organised into categories</li>\n</ol>\n<h3>What we’re currently doing</h3>\n<p>Initially we experimented with <a href=\"https://www.invisionapp.com/craft\">Craft</a> from inVision. It’s library functionality would allow us to store symbols in a central location, share them across the team. Most excitingly of all, symbols would be linked across files, meaning we could ensure we were always using the latest version in our designs.</p>\n<p>Unfortunately, when it came to handling editing clashes, Craft did less well. We lost an entire week of work due to our library file becoming corrupted. We were told that this was a known issue, and the file was unrecoverable. We decided not to entrust our entire pattern library to Craft, there was no way we could risk that happening again.</p>\n<p>We switched to using Sketch files themselves to contain our patterns. A downside to this solution was that editing clashes weren’t handled, at all. Rather, whoever saved the file last would overwrite work of anyone else. Thankfully, <a href=\"https://abstractapp.com/\">Abstract</a> came to our rescue.</p>\n<p>The team has been using Abstract for version management of Sketch files for the last few weeks, and what a difference it’s made! Once you have the git mental model in your head, Abstract’s workflow makes a lot of sense. We can now branch off the master pattern library document, make our changes, and merge back. Clashes are handled visually, giving you the choice of which symbol definition to keep.</p>\n<p>(figure set:abstarct,class:poke-both)</p>\n<p>We now have three out of four of our original requirements. We’re almost there! But what about linking symbols across files?</p>\n<h2>A native solution?</h2>\n<p>I’d argue that level of complexity represented by shared symbols in Sketch requires a native solution. Plugins, like Craft, will only ever be a poly-fill at best.</p>\n<p>Looking at the features that Bohemian have added to Sketch over the last few versions, I strongly suspect that they’re already planning shared symbols. It’s a natural fit for them, they already have the cloud infrastructure from Sketch Cloud and with their new open JSON formatted files, it seems like this might be the next logical step.</p>\n<hr />\n<p><em>Are you looking for a new design challenge in London? We’ll be hiring for some exciting positions within the design team throughout 2017 and 2018. We’d love to hear from you! Check out our <a href=\"https://fireflylearning.com/careers\">list of currently open positions</a>.</em></p>\n","intro":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.","humanDate":{"day":"2nd","month":"May","year":"2017","date":"Tuesday, May 2nd 2017"},"next":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}],"url":"sketchapp"},{"name":"abstractapp","count":1,"items":[{"title":"Creating a pattern library in Sketch","date":"2017-05-02T00:00:00.000Z","tags":["pattern libraries","design","sketchapp","abstractapp","firefly"],"images":[{"image":"map.png","caption":"We created a map of all the existing patterns and their states and modifiers","set":"map"},{"image":"categorising-symbols.png","caption":"An example of how were using layout and labels to categorise symbols in Sketch","set":"categorising"},{"image":"symbols-dropdown.png","caption":"Using slash notation in symbols names to create easily navigable folders within Sketch","set":"dropdown"},{"image":"button-anatomy.png","set":"button-anatomy"},{"image":"using-a-symbol.png","caption":"Using symbol overrides to change the appearance of the button pattern.","set":"using-a-symbol"},{"image":"abstract.png","caption":"Our Pattern Library (or kits as we sometimes call them) as projects in Abstract","set":"abstarct"},{"image":"pin-to-corner.png","caption":"An example of using a transparent shape to pin a symbol to a specific corner, in this case the bottom-left","set":"pintocorner"},{"image":"override-colour.png","caption":"Using a combination of symbol overrides and masks lets you pick an icon and change it’s colour","set":"overridecolour"}],"url":"64","content":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.</p>\n<p>At Firefly, we’ve recently made the transition to Sketch specifically because of the power of symbols. These have enabled us to build our pattern library in a way that helps us to do some extremely rapid prototyping and create consistent experiences for our users.</p>\n<p>Our Front-End and iOS teams already have their own pattern libraries. These are different, partly due to technical reasons, but there’s another reason we kept the patterns separate. As we continue to strive for feature parity between platforms, its obvious that there are some fundamental differences between web and iOS.  There is a <em>way</em> of doing things in iOS — interactions that users expect — that’s different from the web. Hence, web and iOS have the same features, but implemented in the way that makes the most sense to users of that platform.</p>\n<p>Our dream was to create two design pattern libraries that would contain the same elements as the web and iOS libraries. This would mean that we’d all be working from the same list of patterns, rather than adding a translation step when it came to implementation.</p>\n<h2>Structure</h2>\n<p>We studied the structure of the existing pattern libraries and created a map that included all patterns, their modifiers and states. This gave us the structure for our patterns, and a place to start from when translating programatic patterns into something that would be useable in Sketch.</p>\n<p>In simple terms, our pattern library is a number of Sketch files containing — as symbols — all the elements in the Firefly interface. We divide these into separate files, one for each platform. We’ve also broken web into web-core and one file for each of our <a href=\"http://themes.fireflylearning.com\">four core themes</a>.</p>\n<p>In each of the files, we’ve categorised our symbols into areas. This helps massively with your mental model when browsing the symbols page. This also allows us to print a visual style-guide of all our patterns.</p>\n<p>(figure set:categorising,class:poke-both)</p>\n<h2>Symbols</h2>\n<p>Sketch supports symbol nesting and overrides. This makes symbols extremely powerful. This allows you to create a pattern element by combining symbols together.</p>\n<p>However, organisation is everything. If you don’t follow a systematic approach to creating patterns, they’re extremely difficult to use in the wild. We know from experience that confusion arises about which symbols are patterns, and which are simply the building blocks of patterns. Let me explain…</p>\n<h3>Parts and Patterns</h3>\n<p>(figure set:button-anatomy,class:pull-right)</p>\n<p>A pattern is made up of either parts or other symbols. Each part is a symbol. A Button, for example, is made up of two parts <em>Background</em> and <em>Label</em>, and another pattern <em>Icon</em>. We use <a href=\"https://www.sketchapp.com/learn/documentation/symbols/organizing-symbols/\">slash notation</a> to organise parts and patterns under one namespace.</p>\n<p>(figure set:dropdown,class:poke-both)</p>\n<p>Organising our symbols this way makes it easy when using a pattern. It’s immediately obvious from the list of symbols which is a pattern that’s intended for use, and which are just the building blocks of patterns.</p>\n<h3>Using Patterns in the wild</h3>\n<p>When designing a new feature, we’ll start out with a blank sketch file. Let’s say, for example, that we wanted a very simple interface that required two buttons: OK and Cancel. OK needs to be a cancel type with a tick icon, and Cancel needs to be a default type with a cross icon.</p>\n<p>In our pattern library file, we have a page called <em>scratch</em> where we can set up a pattern ready to be copied into another file. We select the <code>Button &gt; Patterns &gt; Button with Icon Left</code> symbol from the list and drop it into our scratch page. We can then use the symbol overrides to change it’s Background, Icon and Label as required. We can also override the text.</p>\n<p>(figure set:using-a-symbol,class:poke-both)</p>\n<p>Once the pattern is set up, we can then copy this into the new document. This only copies the parts required for this instance of the pattern. So trying to change the symbol overrides in the new file won’t work until you copy over all variations of a pattern.</p>\n<h2>Tips ’n tricks</h2>\n<p>There’s a few areas where symbols are ripe for improvement. Given Bohemian’s track record for updates and bug fixes I suspect these can’t be too far off. Meantime, there’s a couple of workarounds that we’ve found particularly useful that I’d like to share.</p>\n<h3>Pin to corner</h3>\n<p>The ability to change resize behaviour in symbols is extremely useful. However, the “Pin to corner” option is somewhat limited as it doesn’t let you specify <em>which</em> corner.</p>\n<p>(figure set:pintocorner,class:pull-right)</p>\n<p>We solve this by simply grouping a transparent shape in with the layer we wish to align. This allows you pin to other corners than the one that Sketch might have automatically picked for you.</p>\n<h3>Override colours of icons</h3>\n<p>It’s annoying to have to have separate symbols for different icon colours. Especially when adding a new colour, meaning you have to create a new symbol for all the icons in the new colour.</p>\n<p>Luckily, we can use layer masks and overrides to easily add colour options. An Icon pattern is actually a grouped rectangle masked out by the icon shape. We are then able to control the icon type <em>and</em> colour from a pre-defined pallet of colours. Adding a new colour is as easy as adding a new icon mask symbol.</p>\n<p>(figure set:overridecolour,class:poke-both)</p>\n<p>Another small tip: Make your icons and masks different sizes, that way you won’t get shown all the icons and colours together in the overrides dropdown.</p>\n<hr />\n<h2>Sharing patterns</h2>\n<p>So far I’ve not really touched on how we’re using our pattern library across a team. An essential part of any pattern library is its use beyond a single person. When we set out to create our pattern library, we had a simple set of requirements:</p>\n<ol>\n<li>Symbols should be stored in a central location that is accessible by the whole team</li>\n<li>Symbols can be linked across files, updating a symbol in any file updates it everywhere</li>\n<li>Editing clashes are handled in a nice way</li>\n<li>Symbols can be organised into categories</li>\n</ol>\n<h3>What we’re currently doing</h3>\n<p>Initially we experimented with <a href=\"https://www.invisionapp.com/craft\">Craft</a> from inVision. It’s library functionality would allow us to store symbols in a central location, share them across the team. Most excitingly of all, symbols would be linked across files, meaning we could ensure we were always using the latest version in our designs.</p>\n<p>Unfortunately, when it came to handling editing clashes, Craft did less well. We lost an entire week of work due to our library file becoming corrupted. We were told that this was a known issue, and the file was unrecoverable. We decided not to entrust our entire pattern library to Craft, there was no way we could risk that happening again.</p>\n<p>We switched to using Sketch files themselves to contain our patterns. A downside to this solution was that editing clashes weren’t handled, at all. Rather, whoever saved the file last would overwrite work of anyone else. Thankfully, <a href=\"https://abstractapp.com/\">Abstract</a> came to our rescue.</p>\n<p>The team has been using Abstract for version management of Sketch files for the last few weeks, and what a difference it’s made! Once you have the git mental model in your head, Abstract’s workflow makes a lot of sense. We can now branch off the master pattern library document, make our changes, and merge back. Clashes are handled visually, giving you the choice of which symbol definition to keep.</p>\n<p>(figure set:abstarct,class:poke-both)</p>\n<p>We now have three out of four of our original requirements. We’re almost there! But what about linking symbols across files?</p>\n<h2>A native solution?</h2>\n<p>I’d argue that level of complexity represented by shared symbols in Sketch requires a native solution. Plugins, like Craft, will only ever be a poly-fill at best.</p>\n<p>Looking at the features that Bohemian have added to Sketch over the last few versions, I strongly suspect that they’re already planning shared symbols. It’s a natural fit for them, they already have the cloud infrastructure from Sketch Cloud and with their new open JSON formatted files, it seems like this might be the next logical step.</p>\n<hr />\n<p><em>Are you looking for a new design challenge in London? We’ll be hiring for some exciting positions within the design team throughout 2017 and 2018. We’d love to hear from you! Check out our <a href=\"https://fireflylearning.com/careers\">list of currently open positions</a>.</em></p>\n","intro":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.","humanDate":{"day":"2nd","month":"May","year":"2017","date":"Tuesday, May 2nd 2017"},"next":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}],"url":"abstractapp"},{"name":"firefly","count":1,"items":[{"title":"Creating a pattern library in Sketch","date":"2017-05-02T00:00:00.000Z","tags":["pattern libraries","design","sketchapp","abstractapp","firefly"],"images":[{"image":"map.png","caption":"We created a map of all the existing patterns and their states and modifiers","set":"map"},{"image":"categorising-symbols.png","caption":"An example of how were using layout and labels to categorise symbols in Sketch","set":"categorising"},{"image":"symbols-dropdown.png","caption":"Using slash notation in symbols names to create easily navigable folders within Sketch","set":"dropdown"},{"image":"button-anatomy.png","set":"button-anatomy"},{"image":"using-a-symbol.png","caption":"Using symbol overrides to change the appearance of the button pattern.","set":"using-a-symbol"},{"image":"abstract.png","caption":"Our Pattern Library (or kits as we sometimes call them) as projects in Abstract","set":"abstarct"},{"image":"pin-to-corner.png","caption":"An example of using a transparent shape to pin a symbol to a specific corner, in this case the bottom-left","set":"pintocorner"},{"image":"override-colour.png","caption":"Using a combination of symbol overrides and masks lets you pick an icon and change it’s colour","set":"overridecolour"}],"url":"64","content":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.</p>\n<p>At Firefly, we’ve recently made the transition to Sketch specifically because of the power of symbols. These have enabled us to build our pattern library in a way that helps us to do some extremely rapid prototyping and create consistent experiences for our users.</p>\n<p>Our Front-End and iOS teams already have their own pattern libraries. These are different, partly due to technical reasons, but there’s another reason we kept the patterns separate. As we continue to strive for feature parity between platforms, its obvious that there are some fundamental differences between web and iOS.  There is a <em>way</em> of doing things in iOS — interactions that users expect — that’s different from the web. Hence, web and iOS have the same features, but implemented in the way that makes the most sense to users of that platform.</p>\n<p>Our dream was to create two design pattern libraries that would contain the same elements as the web and iOS libraries. This would mean that we’d all be working from the same list of patterns, rather than adding a translation step when it came to implementation.</p>\n<h2>Structure</h2>\n<p>We studied the structure of the existing pattern libraries and created a map that included all patterns, their modifiers and states. This gave us the structure for our patterns, and a place to start from when translating programatic patterns into something that would be useable in Sketch.</p>\n<p>In simple terms, our pattern library is a number of Sketch files containing — as symbols — all the elements in the Firefly interface. We divide these into separate files, one for each platform. We’ve also broken web into web-core and one file for each of our <a href=\"http://themes.fireflylearning.com\">four core themes</a>.</p>\n<p>In each of the files, we’ve categorised our symbols into areas. This helps massively with your mental model when browsing the symbols page. This also allows us to print a visual style-guide of all our patterns.</p>\n<p>(figure set:categorising,class:poke-both)</p>\n<h2>Symbols</h2>\n<p>Sketch supports symbol nesting and overrides. This makes symbols extremely powerful. This allows you to create a pattern element by combining symbols together.</p>\n<p>However, organisation is everything. If you don’t follow a systematic approach to creating patterns, they’re extremely difficult to use in the wild. We know from experience that confusion arises about which symbols are patterns, and which are simply the building blocks of patterns. Let me explain…</p>\n<h3>Parts and Patterns</h3>\n<p>(figure set:button-anatomy,class:pull-right)</p>\n<p>A pattern is made up of either parts or other symbols. Each part is a symbol. A Button, for example, is made up of two parts <em>Background</em> and <em>Label</em>, and another pattern <em>Icon</em>. We use <a href=\"https://www.sketchapp.com/learn/documentation/symbols/organizing-symbols/\">slash notation</a> to organise parts and patterns under one namespace.</p>\n<p>(figure set:dropdown,class:poke-both)</p>\n<p>Organising our symbols this way makes it easy when using a pattern. It’s immediately obvious from the list of symbols which is a pattern that’s intended for use, and which are just the building blocks of patterns.</p>\n<h3>Using Patterns in the wild</h3>\n<p>When designing a new feature, we’ll start out with a blank sketch file. Let’s say, for example, that we wanted a very simple interface that required two buttons: OK and Cancel. OK needs to be a cancel type with a tick icon, and Cancel needs to be a default type with a cross icon.</p>\n<p>In our pattern library file, we have a page called <em>scratch</em> where we can set up a pattern ready to be copied into another file. We select the <code>Button &gt; Patterns &gt; Button with Icon Left</code> symbol from the list and drop it into our scratch page. We can then use the symbol overrides to change it’s Background, Icon and Label as required. We can also override the text.</p>\n<p>(figure set:using-a-symbol,class:poke-both)</p>\n<p>Once the pattern is set up, we can then copy this into the new document. This only copies the parts required for this instance of the pattern. So trying to change the symbol overrides in the new file won’t work until you copy over all variations of a pattern.</p>\n<h2>Tips ’n tricks</h2>\n<p>There’s a few areas where symbols are ripe for improvement. Given Bohemian’s track record for updates and bug fixes I suspect these can’t be too far off. Meantime, there’s a couple of workarounds that we’ve found particularly useful that I’d like to share.</p>\n<h3>Pin to corner</h3>\n<p>The ability to change resize behaviour in symbols is extremely useful. However, the “Pin to corner” option is somewhat limited as it doesn’t let you specify <em>which</em> corner.</p>\n<p>(figure set:pintocorner,class:pull-right)</p>\n<p>We solve this by simply grouping a transparent shape in with the layer we wish to align. This allows you pin to other corners than the one that Sketch might have automatically picked for you.</p>\n<h3>Override colours of icons</h3>\n<p>It’s annoying to have to have separate symbols for different icon colours. Especially when adding a new colour, meaning you have to create a new symbol for all the icons in the new colour.</p>\n<p>Luckily, we can use layer masks and overrides to easily add colour options. An Icon pattern is actually a grouped rectangle masked out by the icon shape. We are then able to control the icon type <em>and</em> colour from a pre-defined pallet of colours. Adding a new colour is as easy as adding a new icon mask symbol.</p>\n<p>(figure set:overridecolour,class:poke-both)</p>\n<p>Another small tip: Make your icons and masks different sizes, that way you won’t get shown all the icons and colours together in the overrides dropdown.</p>\n<hr />\n<h2>Sharing patterns</h2>\n<p>So far I’ve not really touched on how we’re using our pattern library across a team. An essential part of any pattern library is its use beyond a single person. When we set out to create our pattern library, we had a simple set of requirements:</p>\n<ol>\n<li>Symbols should be stored in a central location that is accessible by the whole team</li>\n<li>Symbols can be linked across files, updating a symbol in any file updates it everywhere</li>\n<li>Editing clashes are handled in a nice way</li>\n<li>Symbols can be organised into categories</li>\n</ol>\n<h3>What we’re currently doing</h3>\n<p>Initially we experimented with <a href=\"https://www.invisionapp.com/craft\">Craft</a> from inVision. It’s library functionality would allow us to store symbols in a central location, share them across the team. Most excitingly of all, symbols would be linked across files, meaning we could ensure we were always using the latest version in our designs.</p>\n<p>Unfortunately, when it came to handling editing clashes, Craft did less well. We lost an entire week of work due to our library file becoming corrupted. We were told that this was a known issue, and the file was unrecoverable. We decided not to entrust our entire pattern library to Craft, there was no way we could risk that happening again.</p>\n<p>We switched to using Sketch files themselves to contain our patterns. A downside to this solution was that editing clashes weren’t handled, at all. Rather, whoever saved the file last would overwrite work of anyone else. Thankfully, <a href=\"https://abstractapp.com/\">Abstract</a> came to our rescue.</p>\n<p>The team has been using Abstract for version management of Sketch files for the last few weeks, and what a difference it’s made! Once you have the git mental model in your head, Abstract’s workflow makes a lot of sense. We can now branch off the master pattern library document, make our changes, and merge back. Clashes are handled visually, giving you the choice of which symbol definition to keep.</p>\n<p>(figure set:abstarct,class:poke-both)</p>\n<p>We now have three out of four of our original requirements. We’re almost there! But what about linking symbols across files?</p>\n<h2>A native solution?</h2>\n<p>I’d argue that level of complexity represented by shared symbols in Sketch requires a native solution. Plugins, like Craft, will only ever be a poly-fill at best.</p>\n<p>Looking at the features that Bohemian have added to Sketch over the last few versions, I strongly suspect that they’re already planning shared symbols. It’s a natural fit for them, they already have the cloud infrastructure from Sketch Cloud and with their new open JSON formatted files, it seems like this might be the next logical step.</p>\n<hr />\n<p><em>Are you looking for a new design challenge in London? We’ll be hiring for some exciting positions within the design team throughout 2017 and 2018. We’d love to hear from you! Check out our <a href=\"https://fireflylearning.com/careers\">list of currently open positions</a>.</em></p>\n","intro":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.","humanDate":{"day":"2nd","month":"May","year":"2017","date":"Tuesday, May 2nd 2017"},"next":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}],"url":"firefly"}]},"pagination":{"limit":5,"url":"page-","output":"./docs/articles","template":"blogs/articles-pagination.html","pages":[{"items":[{"title":"Some thoughts on design leadership","tags":["leading design conference","design","design leadership","barbican","conferences"],"date":"2017-10-30T00:00:00.000Z","url":"67","content":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.</p>\n<p>Before last year’s event, I was still trying to figure out what my job was, let alone how to do it well. I think my biggest fear when I took the position was that I would no longer have much to offer. Increasingly I’d be taking on less and less of the day-to-day work, and without producing designs or churning out HTML what was I? Last year’s conference helped me to figure out at least some of what I should be doing with my days:</p>\n<ul>\n<li>Designing team processes, environments and culture</li>\n<li>Protecting the team from too much work</li>\n<li>Evangelising design’s role in the company’s success</li>\n</ul>\n<p>My <a href=\"http://roobottom.com/articles/56/\">notes from last year</a> are a bit of a mess. This tells me that I hadn’t really fully understood what any of these new responsibilities were. In fact, its taken the last year for me to get a handle on what any of these mean for my working life. Was I doing a shitty job in the meantime? No, well, I certainly don’t think so. I just hadn’t fully appreciated that I’d taken the step out of a production role and into a leadership role and that I was completely unprepared for what that meant.</p>\n<p>The more I learn about design leadership, the more I realise that in most of the challenges you face every day, you can usually ditch the word <em>design</em>. Leadership is its own thing, a skill you have to be taught and then refine over time. Just because you can design doesn’t automatically mean you can lead a team of designers. Not something I was quick to pick up on. My advice for new design leaders is to realise that you’re unprepared for this new challenge and to cut yourself some slack when things inevitably go wrong.</p>\n<hr />\n<p>This year, I kept a page at the front of my notebook titled “Overall thoughts” and whenever I heard common themes that struck a chord, I wrote them down:</p>\n<ul>\n<li>Things go wrong for everyone, no team is perfect, not even those with 100s of designs and huge budgets</li>\n<li>No-one in your company knows what design leadership is. Spend more time with other design leaders</li>\n<li>Be the “shit umbrella” — protect your team</li>\n<li>Managing designers is hard (although, I’d change this to managing people is hard)</li>\n<li>Strategic partnership is a must. Strive to understand how you can help others in your company solve problems by understanding their point of view</li>\n<li>Take the time to understand your business, not just the role of design within it</li>\n<li>Ask obvious questions, it’s a safe bet that your not the only one who doesn’t understand</li>\n</ul>\n<p>My thoughts on design leadership continue to evolve. I don’t think I’ll ever get to a point where I can write a comprehensive list of what makes a good Head of Design. Like anything, you get better at it over time. There’s always more to be learned, and always some way to be better at your job.</p>\n<p>I do think it’s important to keep evaluating and striving to be better. And, of course, events like Leading Design give you time to step back from the coalface and formulate your thoughts.</p>\n","intro":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.","humanDate":{"day":"30th","month":"Oct","year":"2017","date":"Monday, October 30th 2017"},"prev":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}},{"title":"Too much tuna: The current state of design tools","date":"2017-07-31T00:00:00.000Z","tags":["pattern libraries"],"img":{"src":"/images/articles/66/design-club-chapter-2.jpg","caption":"Listing the tuna, members of the Design Club taking part in the workshop"},"url":"66","content":"<p>Last week I gave a short talk at <a href=\"https://www.meetup.com/Design-Club/\">Design Club</a> about what my team is currently doing with pattern libraries in Sketch.</p>\n<p>It was great to hear that people had lots of questions. Its obvious that were all thinking about patterns, and particularly how Sketch symbols have enabled a new workflow.</p>\n<p>Later, we moved on to a workshop session where we mapped out our design process and made a (long) list of all the tools we were currently using day-to-day.</p>\n  <figure data-width=\"\" data-height=\"\">      <img src=\"/images/articles/66/design-club-chapter-2.jpg\"/>            <figcaption>        Listing the tuna, members of the Design Club taking part in the workshop      </figcaption>        </figure>\n<p>What was clear is that there are a <em>lot</em> of design tools out there. Sketch is ubiquitous, having quickly proved its value against creaky Adobe tools. However, there’s a whole ecosystem of other tools that are designed to fill gaps in the designers workflow.</p>\n<p>Having both a design and front-end development background I feel like I’ve seen this all before. There have been several “revolutions” in web — <abbr title=\"Cascading Style Sheets\">CSS</abbr>, Responsiveness, HTMLinJS, etc —  that all gave rise to any number of tools that promised “more time doing what you love.”</p>\n<p>Some of these tools were flash in the pan: When they didn’t find traction amongst enough developers, they died. However, they each added their voices to the shared knowledge amongst developers on <em>how</em> to develop for the web.</p>\n<p>As it is now with design tools. Sure, some of them don’t really know what they’re trying to be, but can we blame them? We don’t know what we need right now. Ultimately what matters is the thinking behind patterns not how we build them.</p>\n<p>Ultimately, if you’re designing sites for the web or apps for devices, then eventually someone with a bit of coding nounce has to translate your designs into the real deal. Regardless of whether the ultimate destination of your design is HTML, Swift or <em>whatever</em>, I’d argue that designing with patterns in mind — no matter of the size of project — helps you think more like a developer. You’ll have better conversations with your developer friends and this will lead to a better experience for your users.</p>\n<p>Patterns is a way of thinking about design, rather than a set of tools. You could just as easily apply this thinking to MS Paint. But what the tools give us is a way to explore, as a community, what works best.</p>\n<p>I personally welcome the slew of tools even if they are pretty immature right now. There’s a really smart community of designers out there that’ll direct tool makers leading us all to a brighter future. Huzzah!</p>\n","intro":"<p>Last week I gave a short talk at <a href=\"https://www.meetup.com/Design-Club/\">Design Club</a> about what my team is currently doing with pattern libraries in Sketch.","humanDate":{"day":"31st","month":"Jul","year":"2017","date":"Monday, July 31st 2017"},"next":{"title":"Some thoughts on design leadership","url":"67","date":"2017-10-30T00:00:00.000Z"},"prev":{"title":"Creating a pattern library in Sketch","url":"64","date":"2017-05-02T00:00:00.000Z"}},{"title":"Creating a pattern library in Sketch","date":"2017-05-02T00:00:00.000Z","tags":["pattern libraries","design","sketchapp","abstractapp","firefly"],"images":[{"image":"map.png","caption":"We created a map of all the existing patterns and their states and modifiers","set":"map"},{"image":"categorising-symbols.png","caption":"An example of how were using layout and labels to categorise symbols in Sketch","set":"categorising"},{"image":"symbols-dropdown.png","caption":"Using slash notation in symbols names to create easily navigable folders within Sketch","set":"dropdown"},{"image":"button-anatomy.png","set":"button-anatomy"},{"image":"using-a-symbol.png","caption":"Using symbol overrides to change the appearance of the button pattern.","set":"using-a-symbol"},{"image":"abstract.png","caption":"Our Pattern Library (or kits as we sometimes call them) as projects in Abstract","set":"abstarct"},{"image":"pin-to-corner.png","caption":"An example of using a transparent shape to pin a symbol to a specific corner, in this case the bottom-left","set":"pintocorner"},{"image":"override-colour.png","caption":"Using a combination of symbol overrides and masks lets you pick an icon and change it’s colour","set":"overridecolour"}],"url":"64","content":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.</p>\n<p>At Firefly, we’ve recently made the transition to Sketch specifically because of the power of symbols. These have enabled us to build our pattern library in a way that helps us to do some extremely rapid prototyping and create consistent experiences for our users.</p>\n<p>Our Front-End and iOS teams already have their own pattern libraries. These are different, partly due to technical reasons, but there’s another reason we kept the patterns separate. As we continue to strive for feature parity between platforms, its obvious that there are some fundamental differences between web and iOS.  There is a <em>way</em> of doing things in iOS — interactions that users expect — that’s different from the web. Hence, web and iOS have the same features, but implemented in the way that makes the most sense to users of that platform.</p>\n<p>Our dream was to create two design pattern libraries that would contain the same elements as the web and iOS libraries. This would mean that we’d all be working from the same list of patterns, rather than adding a translation step when it came to implementation.</p>\n<h2>Structure</h2>\n<p>We studied the structure of the existing pattern libraries and created a map that included all patterns, their modifiers and states. This gave us the structure for our patterns, and a place to start from when translating programatic patterns into something that would be useable in Sketch.</p>\n<p>In simple terms, our pattern library is a number of Sketch files containing — as symbols — all the elements in the Firefly interface. We divide these into separate files, one for each platform. We’ve also broken web into web-core and one file for each of our <a href=\"http://themes.fireflylearning.com\">four core themes</a>.</p>\n<p>In each of the files, we’ve categorised our symbols into areas. This helps massively with your mental model when browsing the symbols page. This also allows us to print a visual style-guide of all our patterns.</p>\n<p>(figure set:categorising,class:poke-both)</p>\n<h2>Symbols</h2>\n<p>Sketch supports symbol nesting and overrides. This makes symbols extremely powerful. This allows you to create a pattern element by combining symbols together.</p>\n<p>However, organisation is everything. If you don’t follow a systematic approach to creating patterns, they’re extremely difficult to use in the wild. We know from experience that confusion arises about which symbols are patterns, and which are simply the building blocks of patterns. Let me explain…</p>\n<h3>Parts and Patterns</h3>\n<p>(figure set:button-anatomy,class:pull-right)</p>\n<p>A pattern is made up of either parts or other symbols. Each part is a symbol. A Button, for example, is made up of two parts <em>Background</em> and <em>Label</em>, and another pattern <em>Icon</em>. We use <a href=\"https://www.sketchapp.com/learn/documentation/symbols/organizing-symbols/\">slash notation</a> to organise parts and patterns under one namespace.</p>\n<p>(figure set:dropdown,class:poke-both)</p>\n<p>Organising our symbols this way makes it easy when using a pattern. It’s immediately obvious from the list of symbols which is a pattern that’s intended for use, and which are just the building blocks of patterns.</p>\n<h3>Using Patterns in the wild</h3>\n<p>When designing a new feature, we’ll start out with a blank sketch file. Let’s say, for example, that we wanted a very simple interface that required two buttons: OK and Cancel. OK needs to be a cancel type with a tick icon, and Cancel needs to be a default type with a cross icon.</p>\n<p>In our pattern library file, we have a page called <em>scratch</em> where we can set up a pattern ready to be copied into another file. We select the <code>Button &gt; Patterns &gt; Button with Icon Left</code> symbol from the list and drop it into our scratch page. We can then use the symbol overrides to change it’s Background, Icon and Label as required. We can also override the text.</p>\n<p>(figure set:using-a-symbol,class:poke-both)</p>\n<p>Once the pattern is set up, we can then copy this into the new document. This only copies the parts required for this instance of the pattern. So trying to change the symbol overrides in the new file won’t work until you copy over all variations of a pattern.</p>\n<h2>Tips ’n tricks</h2>\n<p>There’s a few areas where symbols are ripe for improvement. Given Bohemian’s track record for updates and bug fixes I suspect these can’t be too far off. Meantime, there’s a couple of workarounds that we’ve found particularly useful that I’d like to share.</p>\n<h3>Pin to corner</h3>\n<p>The ability to change resize behaviour in symbols is extremely useful. However, the “Pin to corner” option is somewhat limited as it doesn’t let you specify <em>which</em> corner.</p>\n<p>(figure set:pintocorner,class:pull-right)</p>\n<p>We solve this by simply grouping a transparent shape in with the layer we wish to align. This allows you pin to other corners than the one that Sketch might have automatically picked for you.</p>\n<h3>Override colours of icons</h3>\n<p>It’s annoying to have to have separate symbols for different icon colours. Especially when adding a new colour, meaning you have to create a new symbol for all the icons in the new colour.</p>\n<p>Luckily, we can use layer masks and overrides to easily add colour options. An Icon pattern is actually a grouped rectangle masked out by the icon shape. We are then able to control the icon type <em>and</em> colour from a pre-defined pallet of colours. Adding a new colour is as easy as adding a new icon mask symbol.</p>\n<p>(figure set:overridecolour,class:poke-both)</p>\n<p>Another small tip: Make your icons and masks different sizes, that way you won’t get shown all the icons and colours together in the overrides dropdown.</p>\n<hr />\n<h2>Sharing patterns</h2>\n<p>So far I’ve not really touched on how we’re using our pattern library across a team. An essential part of any pattern library is its use beyond a single person. When we set out to create our pattern library, we had a simple set of requirements:</p>\n<ol>\n<li>Symbols should be stored in a central location that is accessible by the whole team</li>\n<li>Symbols can be linked across files, updating a symbol in any file updates it everywhere</li>\n<li>Editing clashes are handled in a nice way</li>\n<li>Symbols can be organised into categories</li>\n</ol>\n<h3>What we’re currently doing</h3>\n<p>Initially we experimented with <a href=\"https://www.invisionapp.com/craft\">Craft</a> from inVision. It’s library functionality would allow us to store symbols in a central location, share them across the team. Most excitingly of all, symbols would be linked across files, meaning we could ensure we were always using the latest version in our designs.</p>\n<p>Unfortunately, when it came to handling editing clashes, Craft did less well. We lost an entire week of work due to our library file becoming corrupted. We were told that this was a known issue, and the file was unrecoverable. We decided not to entrust our entire pattern library to Craft, there was no way we could risk that happening again.</p>\n<p>We switched to using Sketch files themselves to contain our patterns. A downside to this solution was that editing clashes weren’t handled, at all. Rather, whoever saved the file last would overwrite work of anyone else. Thankfully, <a href=\"https://abstractapp.com/\">Abstract</a> came to our rescue.</p>\n<p>The team has been using Abstract for version management of Sketch files for the last few weeks, and what a difference it’s made! Once you have the git mental model in your head, Abstract’s workflow makes a lot of sense. We can now branch off the master pattern library document, make our changes, and merge back. Clashes are handled visually, giving you the choice of which symbol definition to keep.</p>\n<p>(figure set:abstarct,class:poke-both)</p>\n<p>We now have three out of four of our original requirements. We’re almost there! But what about linking symbols across files?</p>\n<h2>A native solution?</h2>\n<p>I’d argue that level of complexity represented by shared symbols in Sketch requires a native solution. Plugins, like Craft, will only ever be a poly-fill at best.</p>\n<p>Looking at the features that Bohemian have added to Sketch over the last few versions, I strongly suspect that they’re already planning shared symbols. It’s a natural fit for them, they already have the cloud infrastructure from Sketch Cloud and with their new open JSON formatted files, it seems like this might be the next logical step.</p>\n<hr />\n<p><em>Are you looking for a new design challenge in London? We’ll be hiring for some exciting positions within the design team throughout 2017 and 2018. We’d love to hear from you! Check out our <a href=\"https://fireflylearning.com/careers\">list of currently open positions</a>.</em></p>\n","intro":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.","humanDate":{"day":"2nd","month":"May","year":"2017","date":"Tuesday, May 2nd 2017"},"next":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}],"url":"page-1","currentPage":1}],"links":[{"url":"page-1","currentPage":1}],"totalPages":1},"items":[{"title":"Some thoughts on design leadership","tags":["leading design conference","design","design leadership","barbican","conferences"],"date":"2017-10-30T00:00:00.000Z","url":"67","content":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.</p>\n<p>Before last year’s event, I was still trying to figure out what my job was, let alone how to do it well. I think my biggest fear when I took the position was that I would no longer have much to offer. Increasingly I’d be taking on less and less of the day-to-day work, and without producing designs or churning out HTML what was I? Last year’s conference helped me to figure out at least some of what I should be doing with my days:</p>\n<ul>\n<li>Designing team processes, environments and culture</li>\n<li>Protecting the team from too much work</li>\n<li>Evangelising design’s role in the company’s success</li>\n</ul>\n<p>My <a href=\"http://roobottom.com/articles/56/\">notes from last year</a> are a bit of a mess. This tells me that I hadn’t really fully understood what any of these new responsibilities were. In fact, its taken the last year for me to get a handle on what any of these mean for my working life. Was I doing a shitty job in the meantime? No, well, I certainly don’t think so. I just hadn’t fully appreciated that I’d taken the step out of a production role and into a leadership role and that I was completely unprepared for what that meant.</p>\n<p>The more I learn about design leadership, the more I realise that in most of the challenges you face every day, you can usually ditch the word <em>design</em>. Leadership is its own thing, a skill you have to be taught and then refine over time. Just because you can design doesn’t automatically mean you can lead a team of designers. Not something I was quick to pick up on. My advice for new design leaders is to realise that you’re unprepared for this new challenge and to cut yourself some slack when things inevitably go wrong.</p>\n<hr />\n<p>This year, I kept a page at the front of my notebook titled “Overall thoughts” and whenever I heard common themes that struck a chord, I wrote them down:</p>\n<ul>\n<li>Things go wrong for everyone, no team is perfect, not even those with 100s of designs and huge budgets</li>\n<li>No-one in your company knows what design leadership is. Spend more time with other design leaders</li>\n<li>Be the “shit umbrella” — protect your team</li>\n<li>Managing designers is hard (although, I’d change this to managing people is hard)</li>\n<li>Strategic partnership is a must. Strive to understand how you can help others in your company solve problems by understanding their point of view</li>\n<li>Take the time to understand your business, not just the role of design within it</li>\n<li>Ask obvious questions, it’s a safe bet that your not the only one who doesn’t understand</li>\n</ul>\n<p>My thoughts on design leadership continue to evolve. I don’t think I’ll ever get to a point where I can write a comprehensive list of what makes a good Head of Design. Like anything, you get better at it over time. There’s always more to be learned, and always some way to be better at your job.</p>\n<p>I do think it’s important to keep evaluating and striving to be better. And, of course, events like Leading Design give you time to step back from the coalface and formulate your thoughts.</p>\n","intro":"<p>I spent some of last week listening to some great design leaders share their thoughts at <a href=\"https://2017.leadingdesignconf.com/\">Leading Design 2017</a>. Hosted by the fine folks from <a href=\"https://clearleft.com/\">Clearleft</a> the event is now in its second year.","humanDate":{"day":"30th","month":"Oct","year":"2017","date":"Monday, October 30th 2017"},"prev":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}},{"title":"Too much tuna: The current state of design tools","date":"2017-07-31T00:00:00.000Z","tags":["pattern libraries"],"img":{"src":"/images/articles/66/design-club-chapter-2.jpg","caption":"Listing the tuna, members of the Design Club taking part in the workshop"},"url":"66","content":"<p>Last week I gave a short talk at <a href=\"https://www.meetup.com/Design-Club/\">Design Club</a> about what my team is currently doing with pattern libraries in Sketch.</p>\n<p>It was great to hear that people had lots of questions. Its obvious that were all thinking about patterns, and particularly how Sketch symbols have enabled a new workflow.</p>\n<p>Later, we moved on to a workshop session where we mapped out our design process and made a (long) list of all the tools we were currently using day-to-day.</p>\n  <figure data-width=\"\" data-height=\"\">      <img src=\"/images/articles/66/design-club-chapter-2.jpg\"/>            <figcaption>        Listing the tuna, members of the Design Club taking part in the workshop      </figcaption>        </figure>\n<p>What was clear is that there are a <em>lot</em> of design tools out there. Sketch is ubiquitous, having quickly proved its value against creaky Adobe tools. However, there’s a whole ecosystem of other tools that are designed to fill gaps in the designers workflow.</p>\n<p>Having both a design and front-end development background I feel like I’ve seen this all before. There have been several “revolutions” in web — <abbr title=\"Cascading Style Sheets\">CSS</abbr>, Responsiveness, HTMLinJS, etc —  that all gave rise to any number of tools that promised “more time doing what you love.”</p>\n<p>Some of these tools were flash in the pan: When they didn’t find traction amongst enough developers, they died. However, they each added their voices to the shared knowledge amongst developers on <em>how</em> to develop for the web.</p>\n<p>As it is now with design tools. Sure, some of them don’t really know what they’re trying to be, but can we blame them? We don’t know what we need right now. Ultimately what matters is the thinking behind patterns not how we build them.</p>\n<p>Ultimately, if you’re designing sites for the web or apps for devices, then eventually someone with a bit of coding nounce has to translate your designs into the real deal. Regardless of whether the ultimate destination of your design is HTML, Swift or <em>whatever</em>, I’d argue that designing with patterns in mind — no matter of the size of project — helps you think more like a developer. You’ll have better conversations with your developer friends and this will lead to a better experience for your users.</p>\n<p>Patterns is a way of thinking about design, rather than a set of tools. You could just as easily apply this thinking to MS Paint. But what the tools give us is a way to explore, as a community, what works best.</p>\n<p>I personally welcome the slew of tools even if they are pretty immature right now. There’s a really smart community of designers out there that’ll direct tool makers leading us all to a brighter future. Huzzah!</p>\n","intro":"<p>Last week I gave a short talk at <a href=\"https://www.meetup.com/Design-Club/\">Design Club</a> about what my team is currently doing with pattern libraries in Sketch.","humanDate":{"day":"31st","month":"Jul","year":"2017","date":"Monday, July 31st 2017"},"next":{"title":"Some thoughts on design leadership","url":"67","date":"2017-10-30T00:00:00.000Z"},"prev":{"title":"Creating a pattern library in Sketch","url":"64","date":"2017-05-02T00:00:00.000Z"}},{"title":"Creating a pattern library in Sketch","date":"2017-05-02T00:00:00.000Z","tags":["pattern libraries","design","sketchapp","abstractapp","firefly"],"images":[{"image":"map.png","caption":"We created a map of all the existing patterns and their states and modifiers","set":"map"},{"image":"categorising-symbols.png","caption":"An example of how were using layout and labels to categorise symbols in Sketch","set":"categorising"},{"image":"symbols-dropdown.png","caption":"Using slash notation in symbols names to create easily navigable folders within Sketch","set":"dropdown"},{"image":"button-anatomy.png","set":"button-anatomy"},{"image":"using-a-symbol.png","caption":"Using symbol overrides to change the appearance of the button pattern.","set":"using-a-symbol"},{"image":"abstract.png","caption":"Our Pattern Library (or kits as we sometimes call them) as projects in Abstract","set":"abstarct"},{"image":"pin-to-corner.png","caption":"An example of using a transparent shape to pin a symbol to a specific corner, in this case the bottom-left","set":"pintocorner"},{"image":"override-colour.png","caption":"Using a combination of symbol overrides and masks lets you pick an icon and change it’s colour","set":"overridecolour"}],"url":"64","content":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.</p>\n<p>At Firefly, we’ve recently made the transition to Sketch specifically because of the power of symbols. These have enabled us to build our pattern library in a way that helps us to do some extremely rapid prototyping and create consistent experiences for our users.</p>\n<p>Our Front-End and iOS teams already have their own pattern libraries. These are different, partly due to technical reasons, but there’s another reason we kept the patterns separate. As we continue to strive for feature parity between platforms, its obvious that there are some fundamental differences between web and iOS.  There is a <em>way</em> of doing things in iOS — interactions that users expect — that’s different from the web. Hence, web and iOS have the same features, but implemented in the way that makes the most sense to users of that platform.</p>\n<p>Our dream was to create two design pattern libraries that would contain the same elements as the web and iOS libraries. This would mean that we’d all be working from the same list of patterns, rather than adding a translation step when it came to implementation.</p>\n<h2>Structure</h2>\n<p>We studied the structure of the existing pattern libraries and created a map that included all patterns, their modifiers and states. This gave us the structure for our patterns, and a place to start from when translating programatic patterns into something that would be useable in Sketch.</p>\n<p>In simple terms, our pattern library is a number of Sketch files containing — as symbols — all the elements in the Firefly interface. We divide these into separate files, one for each platform. We’ve also broken web into web-core and one file for each of our <a href=\"http://themes.fireflylearning.com\">four core themes</a>.</p>\n<p>In each of the files, we’ve categorised our symbols into areas. This helps massively with your mental model when browsing the symbols page. This also allows us to print a visual style-guide of all our patterns.</p>\n<p>(figure set:categorising,class:poke-both)</p>\n<h2>Symbols</h2>\n<p>Sketch supports symbol nesting and overrides. This makes symbols extremely powerful. This allows you to create a pattern element by combining symbols together.</p>\n<p>However, organisation is everything. If you don’t follow a systematic approach to creating patterns, they’re extremely difficult to use in the wild. We know from experience that confusion arises about which symbols are patterns, and which are simply the building blocks of patterns. Let me explain…</p>\n<h3>Parts and Patterns</h3>\n<p>(figure set:button-anatomy,class:pull-right)</p>\n<p>A pattern is made up of either parts or other symbols. Each part is a symbol. A Button, for example, is made up of two parts <em>Background</em> and <em>Label</em>, and another pattern <em>Icon</em>. We use <a href=\"https://www.sketchapp.com/learn/documentation/symbols/organizing-symbols/\">slash notation</a> to organise parts and patterns under one namespace.</p>\n<p>(figure set:dropdown,class:poke-both)</p>\n<p>Organising our symbols this way makes it easy when using a pattern. It’s immediately obvious from the list of symbols which is a pattern that’s intended for use, and which are just the building blocks of patterns.</p>\n<h3>Using Patterns in the wild</h3>\n<p>When designing a new feature, we’ll start out with a blank sketch file. Let’s say, for example, that we wanted a very simple interface that required two buttons: OK and Cancel. OK needs to be a cancel type with a tick icon, and Cancel needs to be a default type with a cross icon.</p>\n<p>In our pattern library file, we have a page called <em>scratch</em> where we can set up a pattern ready to be copied into another file. We select the <code>Button &gt; Patterns &gt; Button with Icon Left</code> symbol from the list and drop it into our scratch page. We can then use the symbol overrides to change it’s Background, Icon and Label as required. We can also override the text.</p>\n<p>(figure set:using-a-symbol,class:poke-both)</p>\n<p>Once the pattern is set up, we can then copy this into the new document. This only copies the parts required for this instance of the pattern. So trying to change the symbol overrides in the new file won’t work until you copy over all variations of a pattern.</p>\n<h2>Tips ’n tricks</h2>\n<p>There’s a few areas where symbols are ripe for improvement. Given Bohemian’s track record for updates and bug fixes I suspect these can’t be too far off. Meantime, there’s a couple of workarounds that we’ve found particularly useful that I’d like to share.</p>\n<h3>Pin to corner</h3>\n<p>The ability to change resize behaviour in symbols is extremely useful. However, the “Pin to corner” option is somewhat limited as it doesn’t let you specify <em>which</em> corner.</p>\n<p>(figure set:pintocorner,class:pull-right)</p>\n<p>We solve this by simply grouping a transparent shape in with the layer we wish to align. This allows you pin to other corners than the one that Sketch might have automatically picked for you.</p>\n<h3>Override colours of icons</h3>\n<p>It’s annoying to have to have separate symbols for different icon colours. Especially when adding a new colour, meaning you have to create a new symbol for all the icons in the new colour.</p>\n<p>Luckily, we can use layer masks and overrides to easily add colour options. An Icon pattern is actually a grouped rectangle masked out by the icon shape. We are then able to control the icon type <em>and</em> colour from a pre-defined pallet of colours. Adding a new colour is as easy as adding a new icon mask symbol.</p>\n<p>(figure set:overridecolour,class:poke-both)</p>\n<p>Another small tip: Make your icons and masks different sizes, that way you won’t get shown all the icons and colours together in the overrides dropdown.</p>\n<hr />\n<h2>Sharing patterns</h2>\n<p>So far I’ve not really touched on how we’re using our pattern library across a team. An essential part of any pattern library is its use beyond a single person. When we set out to create our pattern library, we had a simple set of requirements:</p>\n<ol>\n<li>Symbols should be stored in a central location that is accessible by the whole team</li>\n<li>Symbols can be linked across files, updating a symbol in any file updates it everywhere</li>\n<li>Editing clashes are handled in a nice way</li>\n<li>Symbols can be organised into categories</li>\n</ol>\n<h3>What we’re currently doing</h3>\n<p>Initially we experimented with <a href=\"https://www.invisionapp.com/craft\">Craft</a> from inVision. It’s library functionality would allow us to store symbols in a central location, share them across the team. Most excitingly of all, symbols would be linked across files, meaning we could ensure we were always using the latest version in our designs.</p>\n<p>Unfortunately, when it came to handling editing clashes, Craft did less well. We lost an entire week of work due to our library file becoming corrupted. We were told that this was a known issue, and the file was unrecoverable. We decided not to entrust our entire pattern library to Craft, there was no way we could risk that happening again.</p>\n<p>We switched to using Sketch files themselves to contain our patterns. A downside to this solution was that editing clashes weren’t handled, at all. Rather, whoever saved the file last would overwrite work of anyone else. Thankfully, <a href=\"https://abstractapp.com/\">Abstract</a> came to our rescue.</p>\n<p>The team has been using Abstract for version management of Sketch files for the last few weeks, and what a difference it’s made! Once you have the git mental model in your head, Abstract’s workflow makes a lot of sense. We can now branch off the master pattern library document, make our changes, and merge back. Clashes are handled visually, giving you the choice of which symbol definition to keep.</p>\n<p>(figure set:abstarct,class:poke-both)</p>\n<p>We now have three out of four of our original requirements. We’re almost there! But what about linking symbols across files?</p>\n<h2>A native solution?</h2>\n<p>I’d argue that level of complexity represented by shared symbols in Sketch requires a native solution. Plugins, like Craft, will only ever be a poly-fill at best.</p>\n<p>Looking at the features that Bohemian have added to Sketch over the last few versions, I strongly suspect that they’re already planning shared symbols. It’s a natural fit for them, they already have the cloud infrastructure from Sketch Cloud and with their new open JSON formatted files, it seems like this might be the next logical step.</p>\n<hr />\n<p><em>Are you looking for a new design challenge in London? We’ll be hiring for some exciting positions within the design team throughout 2017 and 2018. We’d love to hear from you! Check out our <a href=\"https://fireflylearning.com/careers\">list of currently open positions</a>.</em></p>\n","intro":"<p>I don’t think its hyperbole to say that there’s a revolution happening in the design of digital products.  Designers have long had the idea of designing interfaces from a kit of pre-built parts, but never really had the tools to do this effectively. Sketch is such a tool.","humanDate":{"day":"2nd","month":"May","year":"2017","date":"Tuesday, May 2nd 2017"},"next":{"title":"Too much tuna: The current state of design tools","url":"66","date":"2017-07-31T00:00:00.000Z"}}]},{"name":"work","input":"./source/work/*.md","output":"./docs/work","template":"blogs/work-item.html","sortBy":"date","items":[{"title":"Uncovering Firefly Learning’s brand values","date":"2018-02-01T00:00:00.000Z","org":"firefly","url":"firefly-learning-brand-values","content":"<p>Over the last five years, Firefly Learning has enjoyed tremendous success; we have grown from fifty schools to over five hundred. We now have offices in London, Sydney and Singapore. Our dream to transform learning by empowering all students, teachers and parents is a lot closer today than it was when I joined in September 2011.</p>\n<p>However, the schools we’ve helped so far are just a drop in the ocean compared to the vast number of school-age children around the world. We want to improve learning for all students, not just some.</p>\n<p>When we were small, it was easy for everyone internally to understand our mission; It passed by osmosis by daily contact with our founders, Simon and Joe. As we grow, we felt it was time to articulate our essence in a way that is inspirational and actionable for everyone in the business.</p>\n<p>Our brand values have become the lens through which we view all of our decisions. They form the foundation of the <em>way</em> we talk about Firefly Learning in all of our communications. They are our north star; A guiding set of beliefs that ensure we are all pulling in the same direction.</p>\n<h2>Workshoppin’</h2>\n","intro":"<p>Over the last five years, Firefly Learning has enjoyed tremendous success; we have grown from fifty schools to over five hundred. We now have offices in London, Sydney and Singapore. Our dream to transform learning by empowering all students, teachers and parents is a lot closer today than it was when I joined in September 2011.","humanDate":{"day":"1st","month":"Feb","year":"2018","date":"Thursday, February 1st 2018"},"prev":{"title":"A modern Sketch pattern library","url":"sketch-pattern-library","date":"2017-12-01T00:00:00.000Z"}},{"title":"A modern Sketch pattern library","date":"2017-12-01T00:00:00.000Z","org":"firefly","url":"sketch-pattern-library","content":"","intro":"","humanDate":{"day":"1st","month":"Dec","year":"2017","date":"Friday, December 1st 2017"},"next":{"title":"Uncovering Firefly Learning’s brand values","url":"firefly-learning-brand-values","date":"2018-02-01T00:00:00.000Z"},"prev":{"title":"Designing a scalable design team structure","url":"design-org","date":"2017-07-01T00:00:00.000Z"}},{"title":"Designing a scalable design team structure","date":"2017-07-01T00:00:00.000Z","org":"firefly","url":"design-org","content":"","intro":"","humanDate":{"day":"1st","month":"Jul","year":"2017","date":"Saturday, July 1st 2017"},"next":{"title":"A modern Sketch pattern library","url":"sketch-pattern-library","date":"2017-12-01T00:00:00.000Z"},"prev":{"title":"Creating a markbook for teachers","url":"teacher-markbook","date":"2015-07-01T00:00:00.000Z"}},{"title":"Creating a markbook for teachers","date":"2015-07-01T00:00:00.000Z","org":"firefly","url":"teacher-markbook","content":"","intro":"","humanDate":{"day":"1st","month":"Jul","year":"2015","date":"Wednesday, July 1st 2015"},"next":{"title":"Designing a scalable design team structure","url":"design-org","date":"2017-07-01T00:00:00.000Z"},"prev":{"title":"Visual design for Onalytica’s flagship insight SASS tool","url":"influence-monitor","date":"2011-01-01T00:00:00.000Z"}},{"title":"Visual design for Onalytica’s flagship insight SASS tool","date":"2011-01-01T00:00:00.000Z","org":"onalytica","url":"influence-monitor","content":"","intro":"","humanDate":{"day":"1st","month":"Jan","year":"2011","date":"Saturday, January 1st 2011"},"next":{"title":"Creating a markbook for teachers","url":"teacher-markbook","date":"2015-07-01T00:00:00.000Z"},"prev":{"title":"Design for our wedding","url":"wedding-design","date":"2010-08-01T00:00:00.000Z"}},{"title":"Design for our wedding","date":"2010-08-01T00:00:00.000Z","org":"other","url":"wedding-design","content":"","intro":"","humanDate":{"day":"1st","month":"Aug","year":"2010","date":"Sunday, August 1st 2010"},"next":{"title":"Visual design for Onalytica’s flagship insight SASS tool","url":"influence-monitor","date":"2011-01-01T00:00:00.000Z"},"prev":{"title":"An exciting visual brand for Onalytica","url":"onalytica-brand","date":"2010-03-01T00:00:00.000Z"}},{"title":"An exciting visual brand for Onalytica","date":"2010-03-01T00:00:00.000Z","org":"onalytica","url":"onalytica-brand","content":"","intro":"","humanDate":{"day":"1st","month":"Mar","year":"2010","date":"Monday, March 1st 2010"},"next":{"title":"Design for our wedding","url":"wedding-design","date":"2010-08-01T00:00:00.000Z"},"prev":{"title":"Brand design and e-commerce development for a quirky hand-made gifts company","url":"claire-jones-handmade","date":"2009-02-01T00:00:00.000Z"}},{"title":"Brand design and e-commerce development for a quirky hand-made gifts company","date":"2009-02-01T00:00:00.000Z","org":"other","url":"claire-jones-handmade","content":"","intro":"","humanDate":{"day":"1st","month":"Feb","year":"2009","date":"Sunday, February 1st 2009"},"next":{"title":"An exciting visual brand for Onalytica","url":"onalytica-brand","date":"2010-03-01T00:00:00.000Z"},"prev":{"title":"Brand design and e-commerce development for a unique vintage clothing label","url":"natasha-bailie-vintage-clothing","date":"2008-08-01T00:00:00.000Z"}},{"title":"Brand design and e-commerce development for a unique vintage clothing label","date":"2008-08-01T00:00:00.000Z","org":"other","url":"natasha-bailie-vintage-clothing","content":"","intro":"","humanDate":{"day":"1st","month":"Aug","year":"2008","date":"Friday, August 1st 2008"},"next":{"title":"Brand design and e-commerce development for a quirky hand-made gifts company","url":"claire-jones-handmade","date":"2009-02-01T00:00:00.000Z"},"prev":{"title":"An exciting library of curated online content for kids","url":"my-glubble-library","date":"2008-04-01T00:00:00.000Z"}},{"title":"An exciting library of curated online content for kids","date":"2008-04-01T00:00:00.000Z","org":"glaxstar","url":"my-glubble-library","content":"","intro":"","humanDate":{"day":"1st","month":"Apr","year":"2008","date":"Tuesday, April 1st 2008"},"next":{"title":"Brand design and e-commerce development for a unique vintage clothing label","url":"natasha-bailie-vintage-clothing","date":"2008-08-01T00:00:00.000Z"},"prev":{"title":"Creating a safe online environment for younger children","url":"glubble-browser","date":"2007-11-01T00:00:00.000Z"}},{"title":"Creating a safe online environment for younger children","date":"2007-11-01T00:00:00.000Z","org":"glaxstar","url":"glubble-browser","content":"","intro":"","humanDate":{"day":"1st","month":"Nov","year":"2007","date":"Thursday, November 1st 2007"},"next":{"title":"An exciting library of curated online content for kids","url":"my-glubble-library","date":"2008-04-01T00:00:00.000Z"}}]},{"name":"components","input":"./source/styleguide/components/*.md","output":"./docs/styleguide/components","template":"blogs/component.html","items":[{"title":"Figure","images":[{"url":"/images/example.jpg","width":600,"height":400,"caption":"A cat looking surprised"}],"url":"figure","content":"<p>This is a Figure</p>\n<p>It’s <em>great</em> isn’t it?</p>\n  <figure data-width=\"\" data-height=\"\">      <img src=\"\"/>        </figure>\n","intro":"<p>This is a Figure","humanDate":{"day":"8th","month":"Feb","year":"2018","date":"Thursday, February 8th 2018"}}]}]}
